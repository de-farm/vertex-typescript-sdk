/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IProductEngine {
  export type ProductDeltaStruct = {
    productId: PromiseOrValue<BigNumberish>;
    subaccountId: PromiseOrValue<BigNumberish>;
    amountDeltaX18: PromiseOrValue<BigNumberish>;
    vQuoteDeltaX18: PromiseOrValue<BigNumberish>;
  };

  export type ProductDeltaStructOutput = [
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    productId: number;
    subaccountId: BigNumber;
    amountDeltaX18: BigNumber;
    vQuoteDeltaX18: BigNumber;
  };
}

export declare namespace IPerpEngine {
  export type ConfigStruct = {
    longWeightInitialX18: PromiseOrValue<BigNumberish>;
    shortWeightInitialX18: PromiseOrValue<BigNumberish>;
    longWeightMaintenanceX18: PromiseOrValue<BigNumberish>;
    shortWeightMaintenanceX18: PromiseOrValue<BigNumberish>;
    largePositionPenaltyX18: PromiseOrValue<BigNumberish>;
  };

  export type ConfigStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    longWeightInitialX18: BigNumber;
    shortWeightInitialX18: BigNumber;
    longWeightMaintenanceX18: BigNumber;
    shortWeightMaintenanceX18: BigNumber;
    largePositionPenaltyX18: BigNumber;
  };

  export type StateStruct = {
    priceX18: PromiseOrValue<BigNumberish>;
    ammPriceX18: PromiseOrValue<BigNumberish>;
    cumulativeFundingLongX18: PromiseOrValue<BigNumberish>;
    cumulativeFundingShortX18: PromiseOrValue<BigNumberish>;
    openInterestX18: PromiseOrValue<BigNumberish>;
    fundingLastUpdated: PromiseOrValue<BigNumberish>;
    ammPriceLastUpdated: PromiseOrValue<BigNumberish>;
    availableSettleX18: PromiseOrValue<BigNumberish>;
  };

  export type StateStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    priceX18: BigNumber;
    ammPriceX18: BigNumber;
    cumulativeFundingLongX18: BigNumber;
    cumulativeFundingShortX18: BigNumber;
    openInterestX18: BigNumber;
    fundingLastUpdated: BigNumber;
    ammPriceLastUpdated: BigNumber;
    availableSettleX18: BigNumber;
  };

  export type ProductStruct = {
    config: IPerpEngine.ConfigStruct;
    state: IPerpEngine.StateStruct;
  };

  export type ProductStructOutput = [
    IPerpEngine.ConfigStructOutput,
    IPerpEngine.StateStructOutput
  ] & {
    config: IPerpEngine.ConfigStructOutput;
    state: IPerpEngine.StateStructOutput;
  };

  export type BalanceStruct = {
    amountX18: PromiseOrValue<BigNumberish>;
    vQuoteBalanceX18: PromiseOrValue<BigNumberish>;
    lastCumulativeFundingX18: PromiseOrValue<BigNumberish>;
  };

  export type BalanceStructOutput = [BigNumber, BigNumber, BigNumber] & {
    amountX18: BigNumber;
    vQuoteBalanceX18: BigNumber;
    lastCumulativeFundingX18: BigNumber;
  };
}

export declare namespace IClearinghouse {
  export type OrderRequestStruct = {
    expiration: PromiseOrValue<BigNumberish>;
    amountOrQueuePos: PromiseOrValue<BigNumberish>;
    priceX18: PromiseOrValue<BigNumberish>;
  };

  export type OrderRequestStructOutput = [BigNumber, BigNumber, BigNumber] & {
    expiration: BigNumber;
    amountOrQueuePos: BigNumber;
    priceX18: BigNumber;
  };
}

export interface IPerpEngineInterface extends utils.Interface {
  functions: {
    "applyDeltas((uint32,uint64,int256,int256)[])": FunctionFragment;
    "clearOrders(uint64)": FunctionFragment;
    "getBalanceAmountX18(uint32,uint64)": FunctionFragment;
    "getBalanceHealthX18(uint64,uint32,bool,bool,bool)": FunctionFragment;
    "getBalancePnlX18(uint64,uint32)": FunctionFragment;
    "getClearinghouse()": FunctionFragment;
    "getEngineType()": FunctionFragment;
    "getHealthX18(uint64,bool,bool,bool)": FunctionFragment;
    "getLastLiquidationTime(uint64)": FunctionFragment;
    "getLiqPriceX18(uint32,int256)": FunctionFragment;
    "getMaximumLiquidatableX18(uint64,uint32,int256)": FunctionFragment;
    "getOracle()": FunctionFragment;
    "getOraclePriceX18(uint32)": FunctionFragment;
    "getOrderbook(uint32)": FunctionFragment;
    "getProduct(uint32)": FunctionFragment;
    "getProductAndBalance(uint32,uint64)": FunctionFragment;
    "getProductIds()": FunctionFragment;
    "getSettlementState(uint32,uint64)": FunctionFragment;
    "hasAssets(uint64)": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "sendOrders(uint64,uint32,(uint64,int256,int256)[])": FunctionFragment;
    "settlePnl(uint64)": FunctionFragment;
    "socializeProduct(uint32,int256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "applyDeltas"
      | "clearOrders"
      | "getBalanceAmountX18"
      | "getBalanceHealthX18"
      | "getBalancePnlX18"
      | "getClearinghouse"
      | "getEngineType"
      | "getHealthX18"
      | "getLastLiquidationTime"
      | "getLiqPriceX18"
      | "getMaximumLiquidatableX18"
      | "getOracle"
      | "getOraclePriceX18"
      | "getOrderbook"
      | "getProduct"
      | "getProductAndBalance"
      | "getProductIds"
      | "getSettlementState"
      | "hasAssets"
      | "initialize"
      | "sendOrders"
      | "settlePnl"
      | "socializeProduct"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "applyDeltas",
    values: [IProductEngine.ProductDeltaStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "clearOrders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceAmountX18",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceHealthX18",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalancePnlX18",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClearinghouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEngineType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHealthX18",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastLiquidationTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiqPriceX18",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumLiquidatableX18",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "getOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOraclePriceX18",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderbook",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProduct",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductAndBalance",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementState",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAssets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendOrders",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IClearinghouse.OrderRequestStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "settlePnl",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "socializeProduct",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "applyDeltas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceAmountX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceHealthX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalancePnlX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearinghouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEngineType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHealthX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastLiquidationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiqPriceX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumLiquidatableX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePriceX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderbook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProductAndBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasAssets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendOrders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settlePnl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "socializeProduct",
    data: BytesLike
  ): Result;

  events: {
    "AddProduct(uint32)": EventFragment;
    "ProductUpdate(uint32)": EventFragment;
    "SocializeProduct(uint32,int256,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddProduct"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SocializeProduct"): EventFragment;
}

export interface AddProductEventObject {
  productId: number;
}
export type AddProductEvent = TypedEvent<[number], AddProductEventObject>;

export type AddProductEventFilter = TypedEventFilter<AddProductEvent>;

export interface ProductUpdateEventObject {
  productId: number;
}
export type ProductUpdateEvent = TypedEvent<[number], ProductUpdateEventObject>;

export type ProductUpdateEventFilter = TypedEventFilter<ProductUpdateEvent>;

export interface SocializeProductEventObject {
  productId: number;
  socializedQuote: BigNumber;
  socializedBase: BigNumber;
}
export type SocializeProductEvent = TypedEvent<
  [number, BigNumber, BigNumber],
  SocializeProductEventObject
>;

export type SocializeProductEventFilter =
  TypedEventFilter<SocializeProductEvent>;

export interface IPerpEngine extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPerpEngineInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    applyDeltas(
      deltas: IProductEngine.ProductDeltaStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clearOrders(
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBalanceAmountX18(
      productId: PromiseOrValue<BigNumberish>,
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBalanceHealthX18(
      subaccountId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      weighted: PromiseOrValue<boolean>,
      initial: PromiseOrValue<boolean>,
      withLimitOrders: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBalancePnlX18(
      subaccountId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClearinghouse(overrides?: CallOverrides): Promise<[string]>;

    getEngineType(overrides?: CallOverrides): Promise<[number]>;

    getHealthX18(
      subaccountId: PromiseOrValue<BigNumberish>,
      weighted: PromiseOrValue<boolean>,
      initial: PromiseOrValue<boolean>,
      withLimitOrders: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLastLiquidationTime(
      subaccount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLiqPriceX18(
      productId: PromiseOrValue<BigNumberish>,
      amountX18: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaximumLiquidatableX18(
      subaccountId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      healthAmountX18: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOracle(overrides?: CallOverrides): Promise<[string]>;

    getOraclePriceX18(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrderbook(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProduct(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IPerpEngine.ProductStructOutput]>;

    getProductAndBalance(
      productId: PromiseOrValue<BigNumberish>,
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IPerpEngine.ProductStructOutput, IPerpEngine.BalanceStructOutput]
    >;

    getProductIds(overrides?: CallOverrides): Promise<[number[]]>;

    getSettlementState(
      productId: PromiseOrValue<BigNumberish>,
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        IPerpEngine.ProductStructOutput,
        IPerpEngine.BalanceStructOutput
      ] & {
        availableSettleX18: BigNumber;
        product: IPerpEngine.ProductStructOutput;
        balance: IPerpEngine.BalanceStructOutput;
      }
    >;

    hasAssets(
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _clearinghouse: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      _fees: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendOrders(
      subaccountId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      requests: IClearinghouse.OrderRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settlePnl(
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    socializeProduct(
      productId: PromiseOrValue<BigNumberish>,
      vQuoteX18: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  applyDeltas(
    deltas: IProductEngine.ProductDeltaStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clearOrders(
    subaccountId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBalanceAmountX18(
    productId: PromiseOrValue<BigNumberish>,
    subaccountId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalanceHealthX18(
    subaccountId: PromiseOrValue<BigNumberish>,
    productId: PromiseOrValue<BigNumberish>,
    weighted: PromiseOrValue<boolean>,
    initial: PromiseOrValue<boolean>,
    withLimitOrders: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalancePnlX18(
    subaccountId: PromiseOrValue<BigNumberish>,
    productId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClearinghouse(overrides?: CallOverrides): Promise<string>;

  getEngineType(overrides?: CallOverrides): Promise<number>;

  getHealthX18(
    subaccountId: PromiseOrValue<BigNumberish>,
    weighted: PromiseOrValue<boolean>,
    initial: PromiseOrValue<boolean>,
    withLimitOrders: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLastLiquidationTime(
    subaccount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLiqPriceX18(
    productId: PromiseOrValue<BigNumberish>,
    amountX18: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaximumLiquidatableX18(
    subaccountId: PromiseOrValue<BigNumberish>,
    productId: PromiseOrValue<BigNumberish>,
    healthAmountX18: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOracle(overrides?: CallOverrides): Promise<string>;

  getOraclePriceX18(
    productId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrderbook(
    productId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getProduct(
    productId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPerpEngine.ProductStructOutput>;

  getProductAndBalance(
    productId: PromiseOrValue<BigNumberish>,
    subaccountId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [IPerpEngine.ProductStructOutput, IPerpEngine.BalanceStructOutput]
  >;

  getProductIds(overrides?: CallOverrides): Promise<number[]>;

  getSettlementState(
    productId: PromiseOrValue<BigNumberish>,
    subaccountId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      IPerpEngine.ProductStructOutput,
      IPerpEngine.BalanceStructOutput
    ] & {
      availableSettleX18: BigNumber;
      product: IPerpEngine.ProductStructOutput;
      balance: IPerpEngine.BalanceStructOutput;
    }
  >;

  hasAssets(
    subaccountId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _clearinghouse: PromiseOrValue<string>,
    _quote: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    _admin: PromiseOrValue<string>,
    _fees: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendOrders(
    subaccountId: PromiseOrValue<BigNumberish>,
    productId: PromiseOrValue<BigNumberish>,
    requests: IClearinghouse.OrderRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settlePnl(
    subaccountId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  socializeProduct(
    productId: PromiseOrValue<BigNumberish>,
    vQuoteX18: PromiseOrValue<BigNumberish>,
    isLong: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    applyDeltas(
      deltas: IProductEngine.ProductDeltaStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    clearOrders(
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalanceAmountX18(
      productId: PromiseOrValue<BigNumberish>,
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalanceHealthX18(
      subaccountId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      weighted: PromiseOrValue<boolean>,
      initial: PromiseOrValue<boolean>,
      withLimitOrders: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalancePnlX18(
      subaccountId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearinghouse(overrides?: CallOverrides): Promise<string>;

    getEngineType(overrides?: CallOverrides): Promise<number>;

    getHealthX18(
      subaccountId: PromiseOrValue<BigNumberish>,
      weighted: PromiseOrValue<boolean>,
      initial: PromiseOrValue<boolean>,
      withLimitOrders: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastLiquidationTime(
      subaccount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiqPriceX18(
      productId: PromiseOrValue<BigNumberish>,
      amountX18: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaximumLiquidatableX18(
      subaccountId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      healthAmountX18: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracle(overrides?: CallOverrides): Promise<string>;

    getOraclePriceX18(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderbook(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getProduct(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPerpEngine.ProductStructOutput>;

    getProductAndBalance(
      productId: PromiseOrValue<BigNumberish>,
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IPerpEngine.ProductStructOutput, IPerpEngine.BalanceStructOutput]
    >;

    getProductIds(overrides?: CallOverrides): Promise<number[]>;

    getSettlementState(
      productId: PromiseOrValue<BigNumberish>,
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        IPerpEngine.ProductStructOutput,
        IPerpEngine.BalanceStructOutput
      ] & {
        availableSettleX18: BigNumber;
        product: IPerpEngine.ProductStructOutput;
        balance: IPerpEngine.BalanceStructOutput;
      }
    >;

    hasAssets(
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _clearinghouse: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      _fees: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendOrders(
      subaccountId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      requests: IClearinghouse.OrderRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    settlePnl(
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    socializeProduct(
      productId: PromiseOrValue<BigNumberish>,
      vQuoteX18: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddProduct(uint32)"(productId?: null): AddProductEventFilter;
    AddProduct(productId?: null): AddProductEventFilter;

    "ProductUpdate(uint32)"(
      productId?: PromiseOrValue<BigNumberish> | null
    ): ProductUpdateEventFilter;
    ProductUpdate(
      productId?: PromiseOrValue<BigNumberish> | null
    ): ProductUpdateEventFilter;

    "SocializeProduct(uint32,int256,int256)"(
      productId?: PromiseOrValue<BigNumberish> | null,
      socializedQuote?: null,
      socializedBase?: null
    ): SocializeProductEventFilter;
    SocializeProduct(
      productId?: PromiseOrValue<BigNumberish> | null,
      socializedQuote?: null,
      socializedBase?: null
    ): SocializeProductEventFilter;
  };

  estimateGas: {
    applyDeltas(
      deltas: IProductEngine.ProductDeltaStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clearOrders(
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBalanceAmountX18(
      productId: PromiseOrValue<BigNumberish>,
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalanceHealthX18(
      subaccountId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      weighted: PromiseOrValue<boolean>,
      initial: PromiseOrValue<boolean>,
      withLimitOrders: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalancePnlX18(
      subaccountId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearinghouse(overrides?: CallOverrides): Promise<BigNumber>;

    getEngineType(overrides?: CallOverrides): Promise<BigNumber>;

    getHealthX18(
      subaccountId: PromiseOrValue<BigNumberish>,
      weighted: PromiseOrValue<boolean>,
      initial: PromiseOrValue<boolean>,
      withLimitOrders: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastLiquidationTime(
      subaccount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiqPriceX18(
      productId: PromiseOrValue<BigNumberish>,
      amountX18: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaximumLiquidatableX18(
      subaccountId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      healthAmountX18: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getOraclePriceX18(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderbook(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProduct(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProductAndBalance(
      productId: PromiseOrValue<BigNumberish>,
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProductIds(overrides?: CallOverrides): Promise<BigNumber>;

    getSettlementState(
      productId: PromiseOrValue<BigNumberish>,
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAssets(
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _clearinghouse: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      _fees: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendOrders(
      subaccountId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      requests: IClearinghouse.OrderRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settlePnl(
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    socializeProduct(
      productId: PromiseOrValue<BigNumberish>,
      vQuoteX18: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    applyDeltas(
      deltas: IProductEngine.ProductDeltaStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clearOrders(
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBalanceAmountX18(
      productId: PromiseOrValue<BigNumberish>,
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalanceHealthX18(
      subaccountId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      weighted: PromiseOrValue<boolean>,
      initial: PromiseOrValue<boolean>,
      withLimitOrders: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalancePnlX18(
      subaccountId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClearinghouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEngineType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHealthX18(
      subaccountId: PromiseOrValue<BigNumberish>,
      weighted: PromiseOrValue<boolean>,
      initial: PromiseOrValue<boolean>,
      withLimitOrders: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastLiquidationTime(
      subaccount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiqPriceX18(
      productId: PromiseOrValue<BigNumberish>,
      amountX18: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaximumLiquidatableX18(
      subaccountId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      healthAmountX18: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOraclePriceX18(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderbook(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProduct(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProductAndBalance(
      productId: PromiseOrValue<BigNumberish>,
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProductIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSettlementState(
      productId: PromiseOrValue<BigNumberish>,
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAssets(
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _clearinghouse: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      _fees: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendOrders(
      subaccountId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      requests: IClearinghouse.OrderRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settlePnl(
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    socializeProduct(
      productId: PromiseOrValue<BigNumberish>,
      vQuoteX18: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
