/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface IOracleInterface extends utils.Interface {
  functions: {
    'addFeed(uint32,uint8,address)': FunctionFragment;
    'getPriceX18(uint32)': FunctionFragment;
    'updatePrice(uint32)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: 'addFeed' | 'getPriceX18' | 'updatePrice',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addFeed',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getPriceX18',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updatePrice',
    values: [PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'addFeed', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getPriceX18',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updatePrice',
    data: BytesLike,
  ): Result;

  events: {
    'PriceUpdate(uint32,int256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'PriceUpdate'): EventFragment;
}

export interface PriceUpdateEventObject {
  productId: number;
  price: BigNumber;
}
export type PriceUpdateEvent = TypedEvent<
  [number, BigNumber],
  PriceUpdateEventObject
>;

export type PriceUpdateEventFilter = TypedEventFilter<PriceUpdateEvent>;

export interface IOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addFeed(
      productId: PromiseOrValue<BigNumberish>,
      decimalAdjustment: PromiseOrValue<BigNumberish>,
      feedAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getPriceX18(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    updatePrice(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  addFeed(
    productId: PromiseOrValue<BigNumberish>,
    decimalAdjustment: PromiseOrValue<BigNumberish>,
    feedAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getPriceX18(
    productId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  updatePrice(
    productId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addFeed(
      productId: PromiseOrValue<BigNumberish>,
      decimalAdjustment: PromiseOrValue<BigNumberish>,
      feedAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getPriceX18(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    updatePrice(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    'PriceUpdate(uint32,int256)'(
      productId?: null,
      price?: null,
    ): PriceUpdateEventFilter;
    PriceUpdate(productId?: null, price?: null): PriceUpdateEventFilter;
  };

  estimateGas: {
    addFeed(
      productId: PromiseOrValue<BigNumberish>,
      decimalAdjustment: PromiseOrValue<BigNumberish>,
      feedAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getPriceX18(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    updatePrice(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFeed(
      productId: PromiseOrValue<BigNumberish>,
      decimalAdjustment: PromiseOrValue<BigNumberish>,
      feedAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getPriceX18(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    updatePrice(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
