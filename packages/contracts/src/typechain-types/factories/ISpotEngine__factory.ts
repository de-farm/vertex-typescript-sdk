/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type { ISpotEngine, ISpotEngineInterface } from '../ISpotEngine';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint32',
        name: 'productId',
        type: 'uint32',
      },
    ],
    name: 'AddProduct',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint32',
        name: 'productId',
        type: 'uint32',
      },
    ],
    name: 'ProductUpdate',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint32',
        name: 'productId',
        type: 'uint32',
      },
      {
        indexed: false,
        internalType: 'int256',
        name: 'socializedQuote',
        type: 'int256',
      },
      {
        indexed: false,
        internalType: 'int256',
        name: 'socializedBase',
        type: 'int256',
      },
    ],
    name: 'SocializeProduct',
    type: 'event',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint32',
            name: 'productId',
            type: 'uint32',
          },
          {
            internalType: 'uint64',
            name: 'subaccountId',
            type: 'uint64',
          },
          {
            internalType: 'int256',
            name: 'amountDeltaX18',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'vQuoteDeltaX18',
            type: 'int256',
          },
        ],
        internalType: 'struct IProductEngine.ProductDelta[]',
        name: 'deltas',
        type: 'tuple[]',
      },
    ],
    name: 'applyDeltas',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'subaccountId',
        type: 'uint64',
      },
    ],
    name: 'clearOrders',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'productId',
        type: 'uint32',
      },
      {
        internalType: 'uint64',
        name: 'subaccountId',
        type: 'uint64',
      },
    ],
    name: 'getBalanceAmountX18',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'subaccountId',
        type: 'uint64',
      },
      {
        internalType: 'uint32',
        name: 'productId',
        type: 'uint32',
      },
      {
        internalType: 'bool',
        name: 'weighted',
        type: 'bool',
      },
      {
        internalType: 'bool',
        name: 'initial',
        type: 'bool',
      },
      {
        internalType: 'bool',
        name: 'withLimitOrders',
        type: 'bool',
      },
    ],
    name: 'getBalanceHealthX18',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'subaccountId',
        type: 'uint64',
      },
      {
        internalType: 'uint32',
        name: 'productId',
        type: 'uint32',
      },
    ],
    name: 'getBalancePnlX18',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getClearinghouse',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getEngineType',
    outputs: [
      {
        internalType: 'enum IProductEngine.EngineType',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'subaccountId',
        type: 'uint64',
      },
      {
        internalType: 'bool',
        name: 'weighted',
        type: 'bool',
      },
      {
        internalType: 'bool',
        name: 'initial',
        type: 'bool',
      },
      {
        internalType: 'bool',
        name: 'withLimitOrders',
        type: 'bool',
      },
    ],
    name: 'getHealthX18',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'subaccount',
        type: 'uint64',
      },
    ],
    name: 'getLastLiquidationTime',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'productId',
        type: 'uint32',
      },
      {
        internalType: 'int256',
        name: 'amountX18',
        type: 'int256',
      },
    ],
    name: 'getLiqPriceX18',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'subaccountId',
        type: 'uint64',
      },
      {
        internalType: 'uint32',
        name: 'productId',
        type: 'uint32',
      },
      {
        internalType: 'int256',
        name: 'healthAmountX18',
        type: 'int256',
      },
    ],
    name: 'getMaximumLiquidatableX18',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getOracle',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'productId',
        type: 'uint32',
      },
    ],
    name: 'getOraclePriceX18',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'productId',
        type: 'uint32',
      },
    ],
    name: 'getOrderbook',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'productId',
        type: 'uint32',
      },
    ],
    name: 'getProduct',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'token',
                type: 'address',
              },
              {
                internalType: 'int256',
                name: 'longWeightInitialX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'shortWeightInitialX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'longWeightMaintenanceX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'shortWeightMaintenanceX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'interestInflectionUtilX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'interestFloorX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'interestSmallCapX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'interestLargeCapX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'largePositionPenaltyX18',
                type: 'int256',
              },
            ],
            internalType: 'struct ISpotEngine.Config',
            name: 'config',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'int256',
                name: 'priceX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'cumulativeDepositsMultiplierX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'cumulativeBorrowsMultiplierX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'totalDepositsNormalizedX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'totalBorrowsNormalizedX18',
                type: 'int256',
              },
              {
                internalType: 'uint256',
                name: 'lastUpdateTime',
                type: 'uint256',
              },
            ],
            internalType: 'struct ISpotEngine.State',
            name: 'state',
            type: 'tuple',
          },
        ],
        internalType: 'struct ISpotEngine.Product',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'productId',
        type: 'uint32',
      },
      {
        internalType: 'uint64',
        name: 'subaccountId',
        type: 'uint64',
      },
    ],
    name: 'getProductAndBalance',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'token',
                type: 'address',
              },
              {
                internalType: 'int256',
                name: 'longWeightInitialX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'shortWeightInitialX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'longWeightMaintenanceX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'shortWeightMaintenanceX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'interestInflectionUtilX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'interestFloorX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'interestSmallCapX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'interestLargeCapX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'largePositionPenaltyX18',
                type: 'int256',
              },
            ],
            internalType: 'struct ISpotEngine.Config',
            name: 'config',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'int256',
                name: 'priceX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'cumulativeDepositsMultiplierX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'cumulativeBorrowsMultiplierX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'totalDepositsNormalizedX18',
                type: 'int256',
              },
              {
                internalType: 'int256',
                name: 'totalBorrowsNormalizedX18',
                type: 'int256',
              },
              {
                internalType: 'uint256',
                name: 'lastUpdateTime',
                type: 'uint256',
              },
            ],
            internalType: 'struct ISpotEngine.State',
            name: 'state',
            type: 'tuple',
          },
        ],
        internalType: 'struct ISpotEngine.Product',
        name: '',
        type: 'tuple',
      },
      {
        components: [
          {
            internalType: 'int256',
            name: 'amountX18',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'lastCumulativeMultiplierX18',
            type: 'int256',
          },
        ],
        internalType: 'struct ISpotEngine.Balance',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getProductIds',
    outputs: [
      {
        internalType: 'uint32[]',
        name: '',
        type: 'uint32[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'subaccountId',
        type: 'uint64',
      },
    ],
    name: 'hasAssets',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_clearinghouse',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_quote',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_oracle',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_admin',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_fees',
        type: 'address',
      },
    ],
    name: 'initialize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'subaccountId',
        type: 'uint64',
      },
      {
        internalType: 'uint32',
        name: 'productId',
        type: 'uint32',
      },
      {
        components: [
          {
            internalType: 'uint64',
            name: 'expiration',
            type: 'uint64',
          },
          {
            internalType: 'int256',
            name: 'amountOrQueuePos',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'priceX18',
            type: 'int256',
          },
        ],
        internalType: 'struct IClearinghouse.OrderRequest[]',
        name: 'requests',
        type: 'tuple[]',
      },
    ],
    name: 'sendOrders',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'productId',
        type: 'uint32',
      },
      {
        internalType: 'int256',
        name: 'vQuoteX18',
        type: 'int256',
      },
      {
        internalType: 'bool',
        name: 'isLong',
        type: 'bool',
      },
    ],
    name: 'socializeProduct',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

export class ISpotEngine__factory {
  static readonly abi = _abi;
  static createInterface(): ISpotEngineInterface {
    return new utils.Interface(_abi) as ISpotEngineInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): ISpotEngine {
    return new Contract(address, _abi, signerOrProvider) as ISpotEngine;
  }
}
