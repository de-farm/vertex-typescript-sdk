/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IOrderBook {
  export type MarketStruct = {
    productId: PromiseOrValue<BigNumberish>;
    bidX18: PromiseOrValue<BigNumberish>;
    askX18: PromiseOrValue<BigNumberish>;
    sizeIncrementX18: PromiseOrValue<BigNumberish>;
    priceIncrementX18: PromiseOrValue<BigNumberish>;
    priceX18: PromiseOrValue<BigNumberish>;
    collectedFeesX18: PromiseOrValue<BigNumberish>;
  };

  export type MarketStructOutput = [
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    productId: number;
    bidX18: BigNumber;
    askX18: BigNumber;
    sizeIncrementX18: BigNumber;
    priceIncrementX18: BigNumber;
    priceX18: BigNumber;
    collectedFeesX18: BigNumber;
  };
}

export declare namespace IClearinghouse {
  export type OrderRequestStruct = {
    expiration: PromiseOrValue<BigNumberish>;
    amountOrQueuePos: PromiseOrValue<BigNumberish>;
    priceX18: PromiseOrValue<BigNumberish>;
  };

  export type OrderRequestStructOutput = [BigNumber, BigNumber, BigNumber] & {
    expiration: BigNumber;
    amountOrQueuePos: BigNumber;
    priceX18: BigNumber;
  };
}

export interface IOrderBookInterface extends utils.Interface {
  functions: {
    "clearOrders(uint64)": FunctionFragment;
    "dumpFees()": FunctionFragment;
    "getBookPricesX18()": FunctionFragment;
    "getCumulativeBuySellAmountsX18(uint64)": FunctionFragment;
    "getMarket()": FunctionFragment;
    "initialize(address,address,uint32,int256,int256)": FunctionFragment;
    "sendOrders(uint64,(uint64,int256,int256)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "clearOrders"
      | "dumpFees"
      | "getBookPricesX18"
      | "getCumulativeBuySellAmountsX18"
      | "getMarket"
      | "initialize"
      | "sendOrders"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "clearOrders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "dumpFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBookPricesX18",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCumulativeBuySellAmountsX18",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getMarket", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendOrders",
    values: [PromiseOrValue<BigNumberish>, IClearinghouse.OrderRequestStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "clearOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dumpFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBookPricesX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCumulativeBuySellAmountsX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendOrders", data: BytesLike): Result;

  events: {
    "CancelOrder(uint64,uint64,int256)": EventFragment;
    "FillOrder(uint64,uint64,int256,int256,int256,int256)": EventFragment;
    "PlaceOrder(uint64,uint64,uint64,int256,int256,int256,int256,int256)": EventFragment;
    "RemoveOrder(uint64,uint64,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FillOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlaceOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveOrder"): EventFragment;
}

export interface CancelOrderEventObject {
  subaccount: BigNumber;
  queuePos: BigNumber;
  priceX18: BigNumber;
}
export type CancelOrderEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  CancelOrderEventObject
>;

export type CancelOrderEventFilter = TypedEventFilter<CancelOrderEvent>;

export interface FillOrderEventObject {
  subaccount: BigNumber;
  queuePos: BigNumber;
  priceX18: BigNumber;
  amount: BigNumber;
  quoteDelta: BigNumber;
  fee: BigNumber;
}
export type FillOrderEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  FillOrderEventObject
>;

export type FillOrderEventFilter = TypedEventFilter<FillOrderEvent>;

export interface PlaceOrderEventObject {
  subaccount: BigNumber;
  expiration: BigNumber;
  queuePos: BigNumber;
  priceX18: BigNumber;
  amountInitial: BigNumber;
  amountOnBook: BigNumber;
  quoteDelta: BigNumber;
  fee: BigNumber;
}
export type PlaceOrderEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  PlaceOrderEventObject
>;

export type PlaceOrderEventFilter = TypedEventFilter<PlaceOrderEvent>;

export interface RemoveOrderEventObject {
  subaccount: BigNumber;
  queuePos: BigNumber;
  priceX18: BigNumber;
}
export type RemoveOrderEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  RemoveOrderEventObject
>;

export type RemoveOrderEventFilter = TypedEventFilter<RemoveOrderEvent>;

export interface IOrderBook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOrderBookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    clearOrders(
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dumpFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBookPricesX18(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getCumulativeBuySellAmountsX18(
      subaccount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getMarket(
      overrides?: CallOverrides
    ): Promise<[IOrderBook.MarketStructOutput]>;

    initialize(
      _engine: PromiseOrValue<string>,
      _fees: PromiseOrValue<string>,
      _productId: PromiseOrValue<BigNumberish>,
      _sizeIncrementX18: PromiseOrValue<BigNumberish>,
      _priceIncrementX18: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendOrders(
      subaccountId: PromiseOrValue<BigNumberish>,
      requests: IClearinghouse.OrderRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  clearOrders(
    subaccountId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dumpFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBookPricesX18(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getCumulativeBuySellAmountsX18(
    subaccount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getMarket(overrides?: CallOverrides): Promise<IOrderBook.MarketStructOutput>;

  initialize(
    _engine: PromiseOrValue<string>,
    _fees: PromiseOrValue<string>,
    _productId: PromiseOrValue<BigNumberish>,
    _sizeIncrementX18: PromiseOrValue<BigNumberish>,
    _priceIncrementX18: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendOrders(
    subaccountId: PromiseOrValue<BigNumberish>,
    requests: IClearinghouse.OrderRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    clearOrders(
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    dumpFees(overrides?: CallOverrides): Promise<void>;

    getBookPricesX18(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getCumulativeBuySellAmountsX18(
      subaccount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getMarket(
      overrides?: CallOverrides
    ): Promise<IOrderBook.MarketStructOutput>;

    initialize(
      _engine: PromiseOrValue<string>,
      _fees: PromiseOrValue<string>,
      _productId: PromiseOrValue<BigNumberish>,
      _sizeIncrementX18: PromiseOrValue<BigNumberish>,
      _priceIncrementX18: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendOrders(
      subaccountId: PromiseOrValue<BigNumberish>,
      requests: IClearinghouse.OrderRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CancelOrder(uint64,uint64,int256)"(
      subaccount?: PromiseOrValue<BigNumberish> | null,
      queuePos?: PromiseOrValue<BigNumberish> | null,
      priceX18?: PromiseOrValue<BigNumberish> | null
    ): CancelOrderEventFilter;
    CancelOrder(
      subaccount?: PromiseOrValue<BigNumberish> | null,
      queuePos?: PromiseOrValue<BigNumberish> | null,
      priceX18?: PromiseOrValue<BigNumberish> | null
    ): CancelOrderEventFilter;

    "FillOrder(uint64,uint64,int256,int256,int256,int256)"(
      subaccount?: PromiseOrValue<BigNumberish> | null,
      queuePos?: PromiseOrValue<BigNumberish> | null,
      priceX18?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      quoteDelta?: null,
      fee?: null
    ): FillOrderEventFilter;
    FillOrder(
      subaccount?: PromiseOrValue<BigNumberish> | null,
      queuePos?: PromiseOrValue<BigNumberish> | null,
      priceX18?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      quoteDelta?: null,
      fee?: null
    ): FillOrderEventFilter;

    "PlaceOrder(uint64,uint64,uint64,int256,int256,int256,int256,int256)"(
      subaccount?: PromiseOrValue<BigNumberish> | null,
      expiration?: null,
      queuePos?: PromiseOrValue<BigNumberish> | null,
      priceX18?: PromiseOrValue<BigNumberish> | null,
      amountInitial?: null,
      amountOnBook?: null,
      quoteDelta?: null,
      fee?: null
    ): PlaceOrderEventFilter;
    PlaceOrder(
      subaccount?: PromiseOrValue<BigNumberish> | null,
      expiration?: null,
      queuePos?: PromiseOrValue<BigNumberish> | null,
      priceX18?: PromiseOrValue<BigNumberish> | null,
      amountInitial?: null,
      amountOnBook?: null,
      quoteDelta?: null,
      fee?: null
    ): PlaceOrderEventFilter;

    "RemoveOrder(uint64,uint64,int256)"(
      subaccount?: PromiseOrValue<BigNumberish> | null,
      queuePos?: PromiseOrValue<BigNumberish> | null,
      priceX18?: PromiseOrValue<BigNumberish> | null
    ): RemoveOrderEventFilter;
    RemoveOrder(
      subaccount?: PromiseOrValue<BigNumberish> | null,
      queuePos?: PromiseOrValue<BigNumberish> | null,
      priceX18?: PromiseOrValue<BigNumberish> | null
    ): RemoveOrderEventFilter;
  };

  estimateGas: {
    clearOrders(
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dumpFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBookPricesX18(overrides?: CallOverrides): Promise<BigNumber>;

    getCumulativeBuySellAmountsX18(
      subaccount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarket(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _engine: PromiseOrValue<string>,
      _fees: PromiseOrValue<string>,
      _productId: PromiseOrValue<BigNumberish>,
      _sizeIncrementX18: PromiseOrValue<BigNumberish>,
      _priceIncrementX18: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendOrders(
      subaccountId: PromiseOrValue<BigNumberish>,
      requests: IClearinghouse.OrderRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clearOrders(
      subaccountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dumpFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBookPricesX18(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCumulativeBuySellAmountsX18(
      subaccount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _engine: PromiseOrValue<string>,
      _fees: PromiseOrValue<string>,
      _productId: PromiseOrValue<BigNumberish>,
      _sizeIncrementX18: PromiseOrValue<BigNumberish>,
      _priceIncrementX18: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendOrders(
      subaccountId: PromiseOrValue<BigNumberish>,
      requests: IClearinghouse.OrderRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
