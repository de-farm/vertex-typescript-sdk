/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IStakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimUsdc"
      | "claimVrtx"
      | "getScore"
      | "getTotalScore"
      | "getTotalVrtxStaked"
      | "getUsdcClaimable"
      | "getVrtxClaimable"
      | "getVrtxStaked"
      | "stake"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "claimUsdc", values?: undefined): string;
  encodeFunctionData(functionFragment: "claimVrtx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalScore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVrtxStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUsdcClaimable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVrtxClaimable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVrtxStaked",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "claimUsdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimVrtx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getScore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVrtxStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsdcClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVrtxClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVrtxStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface IStaking extends BaseContract {
  connect(runner?: ContractRunner | null): IStaking;
  waitForDeployment(): Promise<this>;

  interface: IStakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimUsdc: TypedContractMethod<[], [void], "nonpayable">;

  claimVrtx: TypedContractMethod<[], [void], "nonpayable">;

  getScore: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  getTotalScore: TypedContractMethod<[], [bigint], "view">;

  getTotalVrtxStaked: TypedContractMethod<[], [bigint], "view">;

  getUsdcClaimable: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getVrtxClaimable: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getVrtxStaked: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  stake: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimUsdc"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimVrtx"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getScore"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalScore"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalVrtxStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUsdcClaimable"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVrtxClaimable"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVrtxStaked"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  filters: {};
}
