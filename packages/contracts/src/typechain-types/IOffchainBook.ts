/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IOffchainBook {
  export type OrderStruct = {
    subaccount: PromiseOrValue<BigNumberish>;
    priceX18: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    expiration: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
  };

  export type OrderStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    subaccount: BigNumber;
    priceX18: BigNumber;
    amount: BigNumber;
    expiration: BigNumber;
    nonce: BigNumber;
  };

  export type SignedOrderStruct = {
    order: IOffchainBook.OrderStruct;
    signature: PromiseOrValue<BytesLike>;
  };

  export type SignedOrderStructOutput = [
    IOffchainBook.OrderStructOutput,
    string
  ] & { order: IOffchainBook.OrderStructOutput; signature: string };

  export type MarketStruct = {
    productId: PromiseOrValue<BigNumberish>;
    sizeIncrementX18: PromiseOrValue<BigNumberish>;
    priceIncrementX18: PromiseOrValue<BigNumberish>;
    collectedFeesX18: PromiseOrValue<BigNumberish>;
  };

  export type MarketStructOutput = [number, BigNumber, BigNumber, BigNumber] & {
    productId: number;
    sizeIncrementX18: BigNumber;
    priceIncrementX18: BigNumber;
    collectedFeesX18: BigNumber;
  };

  export type FillStatusStruct = {
    amount: PromiseOrValue<BigNumberish>;
    result: PromiseOrValue<BigNumberish>;
  };

  export type FillStatusStructOutput = [BigNumber, number] & {
    amount: BigNumber;
    result: number;
  };
}

export interface IOffchainBookInterface extends utils.Interface {
  functions: {
    "cancelOrders(((uint64,int256,int256,uint64,uint64),bytes)[])": FunctionFragment;
    "dumpFees()": FunctionFragment;
    "getDigest((uint64,int256,int256,uint64,uint64),bool)": FunctionFragment;
    "getMarkPriceX18()": FunctionFragment;
    "getMarket()": FunctionFragment;
    "initialize(address,address,address,uint32,int256,int256)": FunctionFragment;
    "matchOrders(((uint64,int256,int256,uint64,uint64),bytes)[])": FunctionFragment;
    "validateTransactions(((uint64,int256,int256,uint64,uint64),bytes)[],bool[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelOrders"
      | "dumpFees"
      | "getDigest"
      | "getMarkPriceX18"
      | "getMarket"
      | "initialize"
      | "matchOrders"
      | "validateTransactions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelOrders",
    values: [IOffchainBook.SignedOrderStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "dumpFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDigest",
    values: [IOffchainBook.OrderStruct, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarkPriceX18",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getMarket", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "matchOrders",
    values: [IOffchainBook.SignedOrderStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransactions",
    values: [IOffchainBook.SignedOrderStruct[], PromiseOrValue<boolean>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dumpFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDigest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarkPriceX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "matchOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTransactions",
    data: BytesLike
  ): Result;

  events: {
    "CancelOrder(bytes32,uint8)": EventFragment;
    "FillOrder(bytes32,bytes32,int256)": EventFragment;
    "ReportOrder(bytes32,uint64,int256,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FillOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReportOrder"): EventFragment;
}

export interface CancelOrderEventObject {
  orderHash: string;
  reason: number;
}
export type CancelOrderEvent = TypedEvent<
  [string, number],
  CancelOrderEventObject
>;

export type CancelOrderEventFilter = TypedEventFilter<CancelOrderEvent>;

export interface FillOrderEventObject {
  takerHash: string;
  makerHash: string;
  amount: BigNumber;
}
export type FillOrderEvent = TypedEvent<
  [string, string, BigNumber],
  FillOrderEventObject
>;

export type FillOrderEventFilter = TypedEventFilter<FillOrderEvent>;

export interface ReportOrderEventObject {
  orderHash: string;
  subaccount: BigNumber;
  amount: BigNumber;
  priceX18: BigNumber;
}
export type ReportOrderEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ReportOrderEventObject
>;

export type ReportOrderEventFilter = TypedEventFilter<ReportOrderEvent>;

export interface IOffchainBook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOffchainBookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelOrders(
      orders: IOffchainBook.SignedOrderStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dumpFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDigest(
      order: IOffchainBook.OrderStruct,
      isCancellation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMarkPriceX18(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMarket(
      overrides?: CallOverrides
    ): Promise<[IOffchainBook.MarketStructOutput]>;

    initialize(
      _clearinghouse: PromiseOrValue<string>,
      _engine: PromiseOrValue<string>,
      _fees: PromiseOrValue<string>,
      _productId: PromiseOrValue<BigNumberish>,
      _sizeIncrementX18: PromiseOrValue<BigNumberish>,
      _priceIncrementX18: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    matchOrders(
      orders: IOffchainBook.SignedOrderStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateTransactions(
      transactions: IOffchainBook.SignedOrderStruct[],
      isCancellation: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<[IOffchainBook.FillStatusStructOutput[]]>;
  };

  cancelOrders(
    orders: IOffchainBook.SignedOrderStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dumpFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDigest(
    order: IOffchainBook.OrderStruct,
    isCancellation: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarkPriceX18(overrides?: CallOverrides): Promise<BigNumber>;

  getMarket(
    overrides?: CallOverrides
  ): Promise<IOffchainBook.MarketStructOutput>;

  initialize(
    _clearinghouse: PromiseOrValue<string>,
    _engine: PromiseOrValue<string>,
    _fees: PromiseOrValue<string>,
    _productId: PromiseOrValue<BigNumberish>,
    _sizeIncrementX18: PromiseOrValue<BigNumberish>,
    _priceIncrementX18: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  matchOrders(
    orders: IOffchainBook.SignedOrderStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateTransactions(
    transactions: IOffchainBook.SignedOrderStruct[],
    isCancellation: PromiseOrValue<boolean>[],
    overrides?: CallOverrides
  ): Promise<IOffchainBook.FillStatusStructOutput[]>;

  callStatic: {
    cancelOrders(
      orders: IOffchainBook.SignedOrderStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    dumpFees(overrides?: CallOverrides): Promise<void>;

    getDigest(
      order: IOffchainBook.OrderStruct,
      isCancellation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarkPriceX18(overrides?: CallOverrides): Promise<BigNumber>;

    getMarket(
      overrides?: CallOverrides
    ): Promise<IOffchainBook.MarketStructOutput>;

    initialize(
      _clearinghouse: PromiseOrValue<string>,
      _engine: PromiseOrValue<string>,
      _fees: PromiseOrValue<string>,
      _productId: PromiseOrValue<BigNumberish>,
      _sizeIncrementX18: PromiseOrValue<BigNumberish>,
      _priceIncrementX18: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    matchOrders(
      orders: IOffchainBook.SignedOrderStruct[],
      overrides?: CallOverrides
    ): Promise<IOffchainBook.FillStatusStructOutput[]>;

    validateTransactions(
      transactions: IOffchainBook.SignedOrderStruct[],
      isCancellation: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<IOffchainBook.FillStatusStructOutput[]>;
  };

  filters: {
    "CancelOrder(bytes32,uint8)"(
      orderHash?: null,
      reason?: null
    ): CancelOrderEventFilter;
    CancelOrder(orderHash?: null, reason?: null): CancelOrderEventFilter;

    "FillOrder(bytes32,bytes32,int256)"(
      takerHash?: null,
      makerHash?: null,
      amount?: null
    ): FillOrderEventFilter;
    FillOrder(
      takerHash?: null,
      makerHash?: null,
      amount?: null
    ): FillOrderEventFilter;

    "ReportOrder(bytes32,uint64,int256,int256)"(
      orderHash?: null,
      subaccount?: null,
      amount?: null,
      priceX18?: null
    ): ReportOrderEventFilter;
    ReportOrder(
      orderHash?: null,
      subaccount?: null,
      amount?: null,
      priceX18?: null
    ): ReportOrderEventFilter;
  };

  estimateGas: {
    cancelOrders(
      orders: IOffchainBook.SignedOrderStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dumpFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDigest(
      order: IOffchainBook.OrderStruct,
      isCancellation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarkPriceX18(overrides?: CallOverrides): Promise<BigNumber>;

    getMarket(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _clearinghouse: PromiseOrValue<string>,
      _engine: PromiseOrValue<string>,
      _fees: PromiseOrValue<string>,
      _productId: PromiseOrValue<BigNumberish>,
      _sizeIncrementX18: PromiseOrValue<BigNumberish>,
      _priceIncrementX18: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    matchOrders(
      orders: IOffchainBook.SignedOrderStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateTransactions(
      transactions: IOffchainBook.SignedOrderStruct[],
      isCancellation: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelOrders(
      orders: IOffchainBook.SignedOrderStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dumpFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDigest(
      order: IOffchainBook.OrderStruct,
      isCancellation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarkPriceX18(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _clearinghouse: PromiseOrValue<string>,
      _engine: PromiseOrValue<string>,
      _fees: PromiseOrValue<string>,
      _productId: PromiseOrValue<BigNumberish>,
      _sizeIncrementX18: PromiseOrValue<BigNumberish>,
      _priceIncrementX18: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    matchOrders(
      orders: IOffchainBook.SignedOrderStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateTransactions(
      transactions: IOffchainBook.SignedOrderStruct[],
      isCancellation: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
