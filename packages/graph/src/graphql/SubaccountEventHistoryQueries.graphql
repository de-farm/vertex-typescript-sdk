query SubaccountModifyCollateralEventHistoryQuery(
  $subaccountEntityId: String!
  $maxTimeExclusive: BigInt!
  $minTimeInclusive: BigInt!
  $skip: Int
  $first: Int
) {
  modifyCollateralEvents(
    where: {
      subaccount: $subaccountEntityId
      blockTime_lt: $maxTimeExclusive
      blockTime_gt: $minTimeInclusive
    }
    orderBy: blockTime
    orderDirection: desc
    first: $first
    skip: $skip
  ) {
    id
    blockTime

    amount
    productId
  }
}

query SubaccountLiquidationEventHistoryQuery(
  $subaccountEntityId: String!
  $maxTimeExclusive: BigInt!
  $minTimeInclusive: BigInt!
  $skip: Int
  $first: Int
) {
  liquidationEvents(
    where: {
      liquidatee: $subaccountEntityId
      blockTime_lt: $maxTimeExclusive
      blockTime_gt: $minTimeInclusive
    }
    orderBy: blockTime
    orderDirection: desc
    first: $first
    skip: $skip
  ) {
    id
    blockTime

    productId
    liquidatorBaseDelta
    liquidatorQuoteDelta
    insuranceCoverage
  }
}

query SubaccountEventHistoryQuery(
  $subaccountEntityId: String!
  $maxTimeExclusive: BigInt!
  $minTimeInclusive: BigInt!
  # Currently applies for all, and used for pagination, the thought is that you only paginate 1 type of event at once
  $skip: Int
  # This enables hacky filtering of events
  $modifyCollateralLimit: Int
  $settlePnlLimit: Int
  $liquidateeLimit: Int
  $reportOrderLimit: Int
  $cancelOrderLimit: Int
) {
  modifyCollateralEvents(
    where: {
      subaccount: $subaccountEntityId
      blockTime_lt: $maxTimeExclusive
      blockTime_gt: $minTimeInclusive
    }
    orderBy: blockTime
    orderDirection: desc
    first: $modifyCollateralLimit
    skip: $skip
  ) {
    id
    blockTime

    amount
    productId
  }
  settlePnlEvents(
    where: {
      subaccount: $subaccountEntityId
      blockTime_lt: $maxTimeExclusive
      blockTime_gt: $minTimeInclusive
    }
    orderBy: blockTime
    orderDirection: desc
    first: $settlePnlLimit
    skip: $skip
  ) {
    id
    blockTime

    amount
    productId
  }
  liquidationEvents(
    where: {
      liquidatee: $subaccountEntityId
      blockTime_lt: $maxTimeExclusive
      blockTime_gt: $minTimeInclusive
    }
    orderBy: blockTime
    orderDirection: desc
    first: $liquidateeLimit
    skip: $skip
  ) {
    id
    blockTime

    productId
    liquidatorBaseDelta
    liquidatorQuoteDelta
    insuranceCoverage
  }
  reportOrderEvents(
    where: {
      subaccount: $subaccountEntityId
      blockTime_lt: $maxTimeExclusive
      blockTime_gt: $minTimeInclusive
    }
    orderBy: blockTime
    orderDirection: desc
    first: $reportOrderLimit
    skip: $skip
  ) {
    id
    blockTime

    # TODO: more fields
  }
  cancelOrderEvents(
    where: {
      subaccount: $subaccountEntityId
      blockTime_lt: $maxTimeExclusive
      blockTime_gt: $minTimeInclusive
    }
    orderBy: blockTime
    orderDirection: desc
    first: $cancelOrderLimit
    skip: $skip
  ) {
    id
    blockTime

    # TODO: more fields
  }
}

# Separate queries for taker/maker order fills, as we can't match an "OR" on the taker/maker fields
query SubaccountTakerFillEventHistoryQuery(
  $subaccountEntityId: String!
  $maxTimeExclusive: BigInt!
  $minTimeInclusive: BigInt!
  $limit: Int
  $skip: Int
) {
  fillOrderEvents(
    where: {
      taker: $subaccountEntityId
      blockTime_lt: $maxTimeExclusive
      blockTime_gt: $minTimeInclusive
    }
    orderBy: blockTime
    orderDirection: desc
    first: $limit
    skip: $skip
  ) {
    ...FillOrderEventFragment
  }
}
query SubaccountMakerFillEventHistoryQuery(
  $subaccountEntityId: String!
  $maxTimeExclusive: BigInt!
  $minTimeInclusive: BigInt!
  $limit: Int
  $skip: Int
) {
  fillOrderEvents(
    where: {
      maker: $subaccountEntityId
      blockTime_lt: $maxTimeExclusive
      blockTime_gt: $minTimeInclusive
    }
    orderBy: blockTime
    orderDirection: desc
    first: $limit
    skip: $skip
  ) {
    ...FillOrderEventFragment
  }
}

fragment FillOrderEventFragment on FillOrderEvent {
  id
  blockTime

  takerAmountDelta
  makerFee
  takerFee
  makerOrder {
    ...EventOrderFragment
  }
  takerOrder {
    ...EventOrderFragment
  }
}

# All fields on Order
fragment EventOrderFragment on Order {
  id
  digest
  validationResult
  priceX18
  subaccount {
    subaccountId
  }
  reportedAt
  reportedAtBlock
  filledAmount
  collectedFee
}
