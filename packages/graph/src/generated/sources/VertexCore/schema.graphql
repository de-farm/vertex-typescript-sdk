schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

type BurnLpEvent {
  id: ID!
  block: BigInt!
  blockTime: BigInt!
  subaccount: Subaccount!
  productId: BigInt!
  lpAmount: BigInt!
  baseAmount: BigInt!
  quoteAmount: BigInt!
}

input BurnLpEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  blockTime: BigInt
  blockTime_not: BigInt
  blockTime_gt: BigInt
  blockTime_lt: BigInt
  blockTime_gte: BigInt
  blockTime_lte: BigInt
  blockTime_in: [BigInt!]
  blockTime_not_in: [BigInt!]
  subaccount: String
  subaccount_not: String
  subaccount_gt: String
  subaccount_lt: String
  subaccount_gte: String
  subaccount_lte: String
  subaccount_in: [String!]
  subaccount_not_in: [String!]
  subaccount_contains: String
  subaccount_contains_nocase: String
  subaccount_not_contains: String
  subaccount_not_contains_nocase: String
  subaccount_starts_with: String
  subaccount_starts_with_nocase: String
  subaccount_not_starts_with: String
  subaccount_not_starts_with_nocase: String
  subaccount_ends_with: String
  subaccount_ends_with_nocase: String
  subaccount_not_ends_with: String
  subaccount_not_ends_with_nocase: String
  subaccount_: Subaccount_filter
  productId: BigInt
  productId_not: BigInt
  productId_gt: BigInt
  productId_lt: BigInt
  productId_gte: BigInt
  productId_lte: BigInt
  productId_in: [BigInt!]
  productId_not_in: [BigInt!]
  lpAmount: BigInt
  lpAmount_not: BigInt
  lpAmount_gt: BigInt
  lpAmount_lt: BigInt
  lpAmount_gte: BigInt
  lpAmount_lte: BigInt
  lpAmount_in: [BigInt!]
  lpAmount_not_in: [BigInt!]
  baseAmount: BigInt
  baseAmount_not: BigInt
  baseAmount_gt: BigInt
  baseAmount_lt: BigInt
  baseAmount_gte: BigInt
  baseAmount_lte: BigInt
  baseAmount_in: [BigInt!]
  baseAmount_not_in: [BigInt!]
  quoteAmount: BigInt
  quoteAmount_not: BigInt
  quoteAmount_gt: BigInt
  quoteAmount_lt: BigInt
  quoteAmount_gte: BigInt
  quoteAmount_lte: BigInt
  quoteAmount_in: [BigInt!]
  quoteAmount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BurnLpEvent_filter]
  or: [BurnLpEvent_filter]
}

enum BurnLpEvent_orderBy {
  id
  block
  blockTime
  subaccount
  subaccount__id
  subaccount__owner
  subaccount__name
  subaccount__createdAt
  subaccount__createdAtBlock
  productId
  lpAmount
  baseAmount
  quoteAmount
}

scalar Bytes

type Clearinghouse {
  id: ID!
  endpoint: Bytes!
  quoteProduct: Bytes!
  numSubaccounts: BigInt!
  numProducts: BigInt!
  subaccounts(skip: Int = 0, first: Int = 100, orderBy: Subaccount_orderBy, orderDirection: OrderDirection, where: Subaccount_filter): [Subaccount!]!
}

input Clearinghouse_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  endpoint: Bytes
  endpoint_not: Bytes
  endpoint_gt: Bytes
  endpoint_lt: Bytes
  endpoint_gte: Bytes
  endpoint_lte: Bytes
  endpoint_in: [Bytes!]
  endpoint_not_in: [Bytes!]
  endpoint_contains: Bytes
  endpoint_not_contains: Bytes
  quoteProduct: Bytes
  quoteProduct_not: Bytes
  quoteProduct_gt: Bytes
  quoteProduct_lt: Bytes
  quoteProduct_gte: Bytes
  quoteProduct_lte: Bytes
  quoteProduct_in: [Bytes!]
  quoteProduct_not_in: [Bytes!]
  quoteProduct_contains: Bytes
  quoteProduct_not_contains: Bytes
  numSubaccounts: BigInt
  numSubaccounts_not: BigInt
  numSubaccounts_gt: BigInt
  numSubaccounts_lt: BigInt
  numSubaccounts_gte: BigInt
  numSubaccounts_lte: BigInt
  numSubaccounts_in: [BigInt!]
  numSubaccounts_not_in: [BigInt!]
  numProducts: BigInt
  numProducts_not: BigInt
  numProducts_gt: BigInt
  numProducts_lt: BigInt
  numProducts_gte: BigInt
  numProducts_lte: BigInt
  numProducts_in: [BigInt!]
  numProducts_not_in: [BigInt!]
  subaccounts_: Subaccount_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Clearinghouse_filter]
  or: [Clearinghouse_filter]
}

enum Clearinghouse_orderBy {
  id
  endpoint
  quoteProduct
  numSubaccounts
  numProducts
  subaccounts
}

type ClosedPerpBalance {
  id: ID!
  productId: BigInt!
  subaccount: Subaccount!
  balance: PerpBalanceSummary!
  timeOpened: BigInt!
  timeClosed: BigInt!
  netFunding: BigInt!
}

input ClosedPerpBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  productId: BigInt
  productId_not: BigInt
  productId_gt: BigInt
  productId_lt: BigInt
  productId_gte: BigInt
  productId_lte: BigInt
  productId_in: [BigInt!]
  productId_not_in: [BigInt!]
  subaccount: String
  subaccount_not: String
  subaccount_gt: String
  subaccount_lt: String
  subaccount_gte: String
  subaccount_lte: String
  subaccount_in: [String!]
  subaccount_not_in: [String!]
  subaccount_contains: String
  subaccount_contains_nocase: String
  subaccount_not_contains: String
  subaccount_not_contains_nocase: String
  subaccount_starts_with: String
  subaccount_starts_with_nocase: String
  subaccount_not_starts_with: String
  subaccount_not_starts_with_nocase: String
  subaccount_ends_with: String
  subaccount_ends_with_nocase: String
  subaccount_not_ends_with: String
  subaccount_not_ends_with_nocase: String
  subaccount_: Subaccount_filter
  balance: String
  balance_not: String
  balance_gt: String
  balance_lt: String
  balance_gte: String
  balance_lte: String
  balance_in: [String!]
  balance_not_in: [String!]
  balance_contains: String
  balance_contains_nocase: String
  balance_not_contains: String
  balance_not_contains_nocase: String
  balance_starts_with: String
  balance_starts_with_nocase: String
  balance_not_starts_with: String
  balance_not_starts_with_nocase: String
  balance_ends_with: String
  balance_ends_with_nocase: String
  balance_not_ends_with: String
  balance_not_ends_with_nocase: String
  balance_: PerpBalanceSummary_filter
  timeOpened: BigInt
  timeOpened_not: BigInt
  timeOpened_gt: BigInt
  timeOpened_lt: BigInt
  timeOpened_gte: BigInt
  timeOpened_lte: BigInt
  timeOpened_in: [BigInt!]
  timeOpened_not_in: [BigInt!]
  timeClosed: BigInt
  timeClosed_not: BigInt
  timeClosed_gt: BigInt
  timeClosed_lt: BigInt
  timeClosed_gte: BigInt
  timeClosed_lte: BigInt
  timeClosed_in: [BigInt!]
  timeClosed_not_in: [BigInt!]
  netFunding: BigInt
  netFunding_not: BigInt
  netFunding_gt: BigInt
  netFunding_lt: BigInt
  netFunding_gte: BigInt
  netFunding_lte: BigInt
  netFunding_in: [BigInt!]
  netFunding_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ClosedPerpBalance_filter]
  or: [ClosedPerpBalance_filter]
}

enum ClosedPerpBalance_orderBy {
  id
  productId
  subaccount
  subaccount__id
  subaccount__owner
  subaccount__name
  subaccount__createdAt
  subaccount__createdAtBlock
  balance
  balance__id
  balance__productId
  balance__timeOpened
  balance__vQuoteWithoutFunding
  balance__totalNetFunding
  timeOpened
  timeClosed
  netFunding
}

type ClosedSpotBalance {
  id: ID!
  productId: BigInt!
  subaccount: Subaccount!
  balance: SpotBalanceSummary!
  timeOpened: BigInt!
  timeClosed: BigInt!
  netInterest: BigInt!
}

input ClosedSpotBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  productId: BigInt
  productId_not: BigInt
  productId_gt: BigInt
  productId_lt: BigInt
  productId_gte: BigInt
  productId_lte: BigInt
  productId_in: [BigInt!]
  productId_not_in: [BigInt!]
  subaccount: String
  subaccount_not: String
  subaccount_gt: String
  subaccount_lt: String
  subaccount_gte: String
  subaccount_lte: String
  subaccount_in: [String!]
  subaccount_not_in: [String!]
  subaccount_contains: String
  subaccount_contains_nocase: String
  subaccount_not_contains: String
  subaccount_not_contains_nocase: String
  subaccount_starts_with: String
  subaccount_starts_with_nocase: String
  subaccount_not_starts_with: String
  subaccount_not_starts_with_nocase: String
  subaccount_ends_with: String
  subaccount_ends_with_nocase: String
  subaccount_not_ends_with: String
  subaccount_not_ends_with_nocase: String
  subaccount_: Subaccount_filter
  balance: String
  balance_not: String
  balance_gt: String
  balance_lt: String
  balance_gte: String
  balance_lte: String
  balance_in: [String!]
  balance_not_in: [String!]
  balance_contains: String
  balance_contains_nocase: String
  balance_not_contains: String
  balance_not_contains_nocase: String
  balance_starts_with: String
  balance_starts_with_nocase: String
  balance_not_starts_with: String
  balance_not_starts_with_nocase: String
  balance_ends_with: String
  balance_ends_with_nocase: String
  balance_not_ends_with: String
  balance_not_ends_with_nocase: String
  balance_: SpotBalanceSummary_filter
  timeOpened: BigInt
  timeOpened_not: BigInt
  timeOpened_gt: BigInt
  timeOpened_lt: BigInt
  timeOpened_gte: BigInt
  timeOpened_lte: BigInt
  timeOpened_in: [BigInt!]
  timeOpened_not_in: [BigInt!]
  timeClosed: BigInt
  timeClosed_not: BigInt
  timeClosed_gt: BigInt
  timeClosed_lt: BigInt
  timeClosed_gte: BigInt
  timeClosed_lte: BigInt
  timeClosed_in: [BigInt!]
  timeClosed_not_in: [BigInt!]
  netInterest: BigInt
  netInterest_not: BigInt
  netInterest_gt: BigInt
  netInterest_lt: BigInt
  netInterest_gte: BigInt
  netInterest_lte: BigInt
  netInterest_in: [BigInt!]
  netInterest_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ClosedSpotBalance_filter]
  or: [ClosedSpotBalance_filter]
}

enum ClosedSpotBalance_orderBy {
  id
  productId
  subaccount
  subaccount__id
  subaccount__owner
  subaccount__name
  subaccount__createdAt
  subaccount__createdAtBlock
  balance
  balance__id
  balance__productId
  balance__timeOpened
  balance__netRealAmount
  balance__totalNetInterest
  timeOpened
  timeClosed
  netInterest
}

type FillOrderEvent {
  id: ID!
  productId: BigInt!
  block: BigInt!
  blockTime: BigInt!
  subaccount: Subaccount!
  order: Order!
  isTaker: Boolean!
  feeQuote: BigInt!
  amountDelta: BigInt!
  quoteDelta: BigInt!
  newOrderFilledAmount: BigInt!
}

input FillOrderEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  productId: BigInt
  productId_not: BigInt
  productId_gt: BigInt
  productId_lt: BigInt
  productId_gte: BigInt
  productId_lte: BigInt
  productId_in: [BigInt!]
  productId_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  blockTime: BigInt
  blockTime_not: BigInt
  blockTime_gt: BigInt
  blockTime_lt: BigInt
  blockTime_gte: BigInt
  blockTime_lte: BigInt
  blockTime_in: [BigInt!]
  blockTime_not_in: [BigInt!]
  subaccount: String
  subaccount_not: String
  subaccount_gt: String
  subaccount_lt: String
  subaccount_gte: String
  subaccount_lte: String
  subaccount_in: [String!]
  subaccount_not_in: [String!]
  subaccount_contains: String
  subaccount_contains_nocase: String
  subaccount_not_contains: String
  subaccount_not_contains_nocase: String
  subaccount_starts_with: String
  subaccount_starts_with_nocase: String
  subaccount_not_starts_with: String
  subaccount_not_starts_with_nocase: String
  subaccount_ends_with: String
  subaccount_ends_with_nocase: String
  subaccount_not_ends_with: String
  subaccount_not_ends_with_nocase: String
  subaccount_: Subaccount_filter
  order: String
  order_not: String
  order_gt: String
  order_lt: String
  order_gte: String
  order_lte: String
  order_in: [String!]
  order_not_in: [String!]
  order_contains: String
  order_contains_nocase: String
  order_not_contains: String
  order_not_contains_nocase: String
  order_starts_with: String
  order_starts_with_nocase: String
  order_not_starts_with: String
  order_not_starts_with_nocase: String
  order_ends_with: String
  order_ends_with_nocase: String
  order_not_ends_with: String
  order_not_ends_with_nocase: String
  order_: Order_filter
  isTaker: Boolean
  isTaker_not: Boolean
  isTaker_in: [Boolean!]
  isTaker_not_in: [Boolean!]
  feeQuote: BigInt
  feeQuote_not: BigInt
  feeQuote_gt: BigInt
  feeQuote_lt: BigInt
  feeQuote_gte: BigInt
  feeQuote_lte: BigInt
  feeQuote_in: [BigInt!]
  feeQuote_not_in: [BigInt!]
  amountDelta: BigInt
  amountDelta_not: BigInt
  amountDelta_gt: BigInt
  amountDelta_lt: BigInt
  amountDelta_gte: BigInt
  amountDelta_lte: BigInt
  amountDelta_in: [BigInt!]
  amountDelta_not_in: [BigInt!]
  quoteDelta: BigInt
  quoteDelta_not: BigInt
  quoteDelta_gt: BigInt
  quoteDelta_lt: BigInt
  quoteDelta_gte: BigInt
  quoteDelta_lte: BigInt
  quoteDelta_in: [BigInt!]
  quoteDelta_not_in: [BigInt!]
  newOrderFilledAmount: BigInt
  newOrderFilledAmount_not: BigInt
  newOrderFilledAmount_gt: BigInt
  newOrderFilledAmount_lt: BigInt
  newOrderFilledAmount_gte: BigInt
  newOrderFilledAmount_lte: BigInt
  newOrderFilledAmount_in: [BigInt!]
  newOrderFilledAmount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FillOrderEvent_filter]
  or: [FillOrderEvent_filter]
}

enum FillOrderEvent_orderBy {
  id
  productId
  block
  blockTime
  subaccount
  subaccount__id
  subaccount__owner
  subaccount__name
  subaccount__createdAt
  subaccount__createdAtBlock
  order
  order__id
  order__productId
  order__type
  order__digest
  order__priceX18
  order__isTaker
  order__expiration
  order__realExpiration
  order__reportedAt
  order__reportedAtBlock
  order__totalAmount
  order__filledAmount
  order__quoteAmount
  order__collectedFee
  isTaker
  feeQuote
  amountDelta
  quoteDelta
  newOrderFilledAmount
}

type LiquidationEvent {
  id: ID!
  block: BigInt!
  blockTime: BigInt!
  liquidator: Subaccount!
  liquidatee: Subaccount!
  mode: Int!
  healthGroup: BigInt!
  liquidationAmount: BigInt!
  liquidationPayment: BigInt!
  insuranceCoverage: BigInt!
  spotProductId: BigInt!
  spotAmount: BigInt!
  perpProductId: BigInt!
  perpAmount: BigInt!
  spotOraclePriceX18: BigInt!
  perpOraclePriceX18: BigInt!
}

input LiquidationEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  blockTime: BigInt
  blockTime_not: BigInt
  blockTime_gt: BigInt
  blockTime_lt: BigInt
  blockTime_gte: BigInt
  blockTime_lte: BigInt
  blockTime_in: [BigInt!]
  blockTime_not_in: [BigInt!]
  liquidator: String
  liquidator_not: String
  liquidator_gt: String
  liquidator_lt: String
  liquidator_gte: String
  liquidator_lte: String
  liquidator_in: [String!]
  liquidator_not_in: [String!]
  liquidator_contains: String
  liquidator_contains_nocase: String
  liquidator_not_contains: String
  liquidator_not_contains_nocase: String
  liquidator_starts_with: String
  liquidator_starts_with_nocase: String
  liquidator_not_starts_with: String
  liquidator_not_starts_with_nocase: String
  liquidator_ends_with: String
  liquidator_ends_with_nocase: String
  liquidator_not_ends_with: String
  liquidator_not_ends_with_nocase: String
  liquidator_: Subaccount_filter
  liquidatee: String
  liquidatee_not: String
  liquidatee_gt: String
  liquidatee_lt: String
  liquidatee_gte: String
  liquidatee_lte: String
  liquidatee_in: [String!]
  liquidatee_not_in: [String!]
  liquidatee_contains: String
  liquidatee_contains_nocase: String
  liquidatee_not_contains: String
  liquidatee_not_contains_nocase: String
  liquidatee_starts_with: String
  liquidatee_starts_with_nocase: String
  liquidatee_not_starts_with: String
  liquidatee_not_starts_with_nocase: String
  liquidatee_ends_with: String
  liquidatee_ends_with_nocase: String
  liquidatee_not_ends_with: String
  liquidatee_not_ends_with_nocase: String
  liquidatee_: Subaccount_filter
  mode: Int
  mode_not: Int
  mode_gt: Int
  mode_lt: Int
  mode_gte: Int
  mode_lte: Int
  mode_in: [Int!]
  mode_not_in: [Int!]
  healthGroup: BigInt
  healthGroup_not: BigInt
  healthGroup_gt: BigInt
  healthGroup_lt: BigInt
  healthGroup_gte: BigInt
  healthGroup_lte: BigInt
  healthGroup_in: [BigInt!]
  healthGroup_not_in: [BigInt!]
  liquidationAmount: BigInt
  liquidationAmount_not: BigInt
  liquidationAmount_gt: BigInt
  liquidationAmount_lt: BigInt
  liquidationAmount_gte: BigInt
  liquidationAmount_lte: BigInt
  liquidationAmount_in: [BigInt!]
  liquidationAmount_not_in: [BigInt!]
  liquidationPayment: BigInt
  liquidationPayment_not: BigInt
  liquidationPayment_gt: BigInt
  liquidationPayment_lt: BigInt
  liquidationPayment_gte: BigInt
  liquidationPayment_lte: BigInt
  liquidationPayment_in: [BigInt!]
  liquidationPayment_not_in: [BigInt!]
  insuranceCoverage: BigInt
  insuranceCoverage_not: BigInt
  insuranceCoverage_gt: BigInt
  insuranceCoverage_lt: BigInt
  insuranceCoverage_gte: BigInt
  insuranceCoverage_lte: BigInt
  insuranceCoverage_in: [BigInt!]
  insuranceCoverage_not_in: [BigInt!]
  spotProductId: BigInt
  spotProductId_not: BigInt
  spotProductId_gt: BigInt
  spotProductId_lt: BigInt
  spotProductId_gte: BigInt
  spotProductId_lte: BigInt
  spotProductId_in: [BigInt!]
  spotProductId_not_in: [BigInt!]
  spotAmount: BigInt
  spotAmount_not: BigInt
  spotAmount_gt: BigInt
  spotAmount_lt: BigInt
  spotAmount_gte: BigInt
  spotAmount_lte: BigInt
  spotAmount_in: [BigInt!]
  spotAmount_not_in: [BigInt!]
  perpProductId: BigInt
  perpProductId_not: BigInt
  perpProductId_gt: BigInt
  perpProductId_lt: BigInt
  perpProductId_gte: BigInt
  perpProductId_lte: BigInt
  perpProductId_in: [BigInt!]
  perpProductId_not_in: [BigInt!]
  perpAmount: BigInt
  perpAmount_not: BigInt
  perpAmount_gt: BigInt
  perpAmount_lt: BigInt
  perpAmount_gte: BigInt
  perpAmount_lte: BigInt
  perpAmount_in: [BigInt!]
  perpAmount_not_in: [BigInt!]
  spotOraclePriceX18: BigInt
  spotOraclePriceX18_not: BigInt
  spotOraclePriceX18_gt: BigInt
  spotOraclePriceX18_lt: BigInt
  spotOraclePriceX18_gte: BigInt
  spotOraclePriceX18_lte: BigInt
  spotOraclePriceX18_in: [BigInt!]
  spotOraclePriceX18_not_in: [BigInt!]
  perpOraclePriceX18: BigInt
  perpOraclePriceX18_not: BigInt
  perpOraclePriceX18_gt: BigInt
  perpOraclePriceX18_lt: BigInt
  perpOraclePriceX18_gte: BigInt
  perpOraclePriceX18_lte: BigInt
  perpOraclePriceX18_in: [BigInt!]
  perpOraclePriceX18_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiquidationEvent_filter]
  or: [LiquidationEvent_filter]
}

enum LiquidationEvent_orderBy {
  id
  block
  blockTime
  liquidator
  liquidator__id
  liquidator__owner
  liquidator__name
  liquidator__createdAt
  liquidator__createdAtBlock
  liquidatee
  liquidatee__id
  liquidatee__owner
  liquidatee__name
  liquidatee__createdAt
  liquidatee__createdAtBlock
  mode
  healthGroup
  liquidationAmount
  liquidationPayment
  insuranceCoverage
  spotProductId
  spotAmount
  perpProductId
  perpAmount
  spotOraclePriceX18
  perpOraclePriceX18
}

type MintLpEvent {
  id: ID!
  block: BigInt!
  blockTime: BigInt!
  subaccount: Subaccount!
  productId: BigInt!
  lpAmount: BigInt!
  baseAmount: BigInt!
  quoteAmount: BigInt!
}

input MintLpEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  blockTime: BigInt
  blockTime_not: BigInt
  blockTime_gt: BigInt
  blockTime_lt: BigInt
  blockTime_gte: BigInt
  blockTime_lte: BigInt
  blockTime_in: [BigInt!]
  blockTime_not_in: [BigInt!]
  subaccount: String
  subaccount_not: String
  subaccount_gt: String
  subaccount_lt: String
  subaccount_gte: String
  subaccount_lte: String
  subaccount_in: [String!]
  subaccount_not_in: [String!]
  subaccount_contains: String
  subaccount_contains_nocase: String
  subaccount_not_contains: String
  subaccount_not_contains_nocase: String
  subaccount_starts_with: String
  subaccount_starts_with_nocase: String
  subaccount_not_starts_with: String
  subaccount_not_starts_with_nocase: String
  subaccount_ends_with: String
  subaccount_ends_with_nocase: String
  subaccount_not_ends_with: String
  subaccount_not_ends_with_nocase: String
  subaccount_: Subaccount_filter
  productId: BigInt
  productId_not: BigInt
  productId_gt: BigInt
  productId_lt: BigInt
  productId_gte: BigInt
  productId_lte: BigInt
  productId_in: [BigInt!]
  productId_not_in: [BigInt!]
  lpAmount: BigInt
  lpAmount_not: BigInt
  lpAmount_gt: BigInt
  lpAmount_lt: BigInt
  lpAmount_gte: BigInt
  lpAmount_lte: BigInt
  lpAmount_in: [BigInt!]
  lpAmount_not_in: [BigInt!]
  baseAmount: BigInt
  baseAmount_not: BigInt
  baseAmount_gt: BigInt
  baseAmount_lt: BigInt
  baseAmount_gte: BigInt
  baseAmount_lte: BigInt
  baseAmount_in: [BigInt!]
  baseAmount_not_in: [BigInt!]
  quoteAmount: BigInt
  quoteAmount_not: BigInt
  quoteAmount_gt: BigInt
  quoteAmount_lt: BigInt
  quoteAmount_gte: BigInt
  quoteAmount_lte: BigInt
  quoteAmount_in: [BigInt!]
  quoteAmount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MintLpEvent_filter]
  or: [MintLpEvent_filter]
}

enum MintLpEvent_orderBy {
  id
  block
  blockTime
  subaccount
  subaccount__id
  subaccount__owner
  subaccount__name
  subaccount__createdAt
  subaccount__createdAtBlock
  productId
  lpAmount
  baseAmount
  quoteAmount
}

type ModifyCollateralEvent {
  id: ID!
  block: BigInt!
  blockTime: BigInt!
  subaccount: Subaccount!
  amount: BigInt!
  productId: BigInt!
  newBalanceAmount: BigInt!
  oraclePriceX18: BigInt!
}

input ModifyCollateralEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  blockTime: BigInt
  blockTime_not: BigInt
  blockTime_gt: BigInt
  blockTime_lt: BigInt
  blockTime_gte: BigInt
  blockTime_lte: BigInt
  blockTime_in: [BigInt!]
  blockTime_not_in: [BigInt!]
  subaccount: String
  subaccount_not: String
  subaccount_gt: String
  subaccount_lt: String
  subaccount_gte: String
  subaccount_lte: String
  subaccount_in: [String!]
  subaccount_not_in: [String!]
  subaccount_contains: String
  subaccount_contains_nocase: String
  subaccount_not_contains: String
  subaccount_not_contains_nocase: String
  subaccount_starts_with: String
  subaccount_starts_with_nocase: String
  subaccount_not_starts_with: String
  subaccount_not_starts_with_nocase: String
  subaccount_ends_with: String
  subaccount_ends_with_nocase: String
  subaccount_not_ends_with: String
  subaccount_not_ends_with_nocase: String
  subaccount_: Subaccount_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  productId: BigInt
  productId_not: BigInt
  productId_gt: BigInt
  productId_lt: BigInt
  productId_gte: BigInt
  productId_lte: BigInt
  productId_in: [BigInt!]
  productId_not_in: [BigInt!]
  newBalanceAmount: BigInt
  newBalanceAmount_not: BigInt
  newBalanceAmount_gt: BigInt
  newBalanceAmount_lt: BigInt
  newBalanceAmount_gte: BigInt
  newBalanceAmount_lte: BigInt
  newBalanceAmount_in: [BigInt!]
  newBalanceAmount_not_in: [BigInt!]
  oraclePriceX18: BigInt
  oraclePriceX18_not: BigInt
  oraclePriceX18_gt: BigInt
  oraclePriceX18_lt: BigInt
  oraclePriceX18_gte: BigInt
  oraclePriceX18_lte: BigInt
  oraclePriceX18_in: [BigInt!]
  oraclePriceX18_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ModifyCollateralEvent_filter]
  or: [ModifyCollateralEvent_filter]
}

enum ModifyCollateralEvent_orderBy {
  id
  block
  blockTime
  subaccount
  subaccount__id
  subaccount__owner
  subaccount__name
  subaccount__createdAt
  subaccount__createdAtBlock
  amount
  productId
  newBalanceAmount
  oraclePriceX18
}

type Order {
  id: ID!
  productId: BigInt!
  type: OrderType!
  digest: Bytes!
  priceX18: BigInt!
  isTaker: Boolean!
  expiration: BigInt!
  realExpiration: BigInt!
  subaccount: Subaccount!
  reportedAt: BigInt!
  reportedAtBlock: BigInt!
  totalAmount: BigInt!
  filledAmount: BigInt!
  quoteAmount: BigInt!
  collectedFee: BigInt!
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

enum OrderType {
  DEFAULT
  IOC
  FOK
  POST_ONLY
  UNKNOWN
}

input Order_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  productId: BigInt
  productId_not: BigInt
  productId_gt: BigInt
  productId_lt: BigInt
  productId_gte: BigInt
  productId_lte: BigInt
  productId_in: [BigInt!]
  productId_not_in: [BigInt!]
  type: OrderType
  type_not: OrderType
  type_in: [OrderType!]
  type_not_in: [OrderType!]
  digest: Bytes
  digest_not: Bytes
  digest_gt: Bytes
  digest_lt: Bytes
  digest_gte: Bytes
  digest_lte: Bytes
  digest_in: [Bytes!]
  digest_not_in: [Bytes!]
  digest_contains: Bytes
  digest_not_contains: Bytes
  priceX18: BigInt
  priceX18_not: BigInt
  priceX18_gt: BigInt
  priceX18_lt: BigInt
  priceX18_gte: BigInt
  priceX18_lte: BigInt
  priceX18_in: [BigInt!]
  priceX18_not_in: [BigInt!]
  isTaker: Boolean
  isTaker_not: Boolean
  isTaker_in: [Boolean!]
  isTaker_not_in: [Boolean!]
  expiration: BigInt
  expiration_not: BigInt
  expiration_gt: BigInt
  expiration_lt: BigInt
  expiration_gte: BigInt
  expiration_lte: BigInt
  expiration_in: [BigInt!]
  expiration_not_in: [BigInt!]
  realExpiration: BigInt
  realExpiration_not: BigInt
  realExpiration_gt: BigInt
  realExpiration_lt: BigInt
  realExpiration_gte: BigInt
  realExpiration_lte: BigInt
  realExpiration_in: [BigInt!]
  realExpiration_not_in: [BigInt!]
  subaccount: String
  subaccount_not: String
  subaccount_gt: String
  subaccount_lt: String
  subaccount_gte: String
  subaccount_lte: String
  subaccount_in: [String!]
  subaccount_not_in: [String!]
  subaccount_contains: String
  subaccount_contains_nocase: String
  subaccount_not_contains: String
  subaccount_not_contains_nocase: String
  subaccount_starts_with: String
  subaccount_starts_with_nocase: String
  subaccount_not_starts_with: String
  subaccount_not_starts_with_nocase: String
  subaccount_ends_with: String
  subaccount_ends_with_nocase: String
  subaccount_not_ends_with: String
  subaccount_not_ends_with_nocase: String
  subaccount_: Subaccount_filter
  reportedAt: BigInt
  reportedAt_not: BigInt
  reportedAt_gt: BigInt
  reportedAt_lt: BigInt
  reportedAt_gte: BigInt
  reportedAt_lte: BigInt
  reportedAt_in: [BigInt!]
  reportedAt_not_in: [BigInt!]
  reportedAtBlock: BigInt
  reportedAtBlock_not: BigInt
  reportedAtBlock_gt: BigInt
  reportedAtBlock_lt: BigInt
  reportedAtBlock_gte: BigInt
  reportedAtBlock_lte: BigInt
  reportedAtBlock_in: [BigInt!]
  reportedAtBlock_not_in: [BigInt!]
  totalAmount: BigInt
  totalAmount_not: BigInt
  totalAmount_gt: BigInt
  totalAmount_lt: BigInt
  totalAmount_gte: BigInt
  totalAmount_lte: BigInt
  totalAmount_in: [BigInt!]
  totalAmount_not_in: [BigInt!]
  filledAmount: BigInt
  filledAmount_not: BigInt
  filledAmount_gt: BigInt
  filledAmount_lt: BigInt
  filledAmount_gte: BigInt
  filledAmount_lte: BigInt
  filledAmount_in: [BigInt!]
  filledAmount_not_in: [BigInt!]
  quoteAmount: BigInt
  quoteAmount_not: BigInt
  quoteAmount_gt: BigInt
  quoteAmount_lt: BigInt
  quoteAmount_gte: BigInt
  quoteAmount_lte: BigInt
  quoteAmount_in: [BigInt!]
  quoteAmount_not_in: [BigInt!]
  collectedFee: BigInt
  collectedFee_not: BigInt
  collectedFee_gt: BigInt
  collectedFee_lt: BigInt
  collectedFee_gte: BigInt
  collectedFee_lte: BigInt
  collectedFee_in: [BigInt!]
  collectedFee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Order_filter]
  or: [Order_filter]
}

enum Order_orderBy {
  id
  productId
  type
  digest
  priceX18
  isTaker
  expiration
  realExpiration
  subaccount
  subaccount__id
  subaccount__owner
  subaccount__name
  subaccount__createdAt
  subaccount__createdAtBlock
  reportedAt
  reportedAtBlock
  totalAmount
  filledAmount
  quoteAmount
  collectedFee
}

type PerpBalanceSummary {
  id: ID!
  productId: BigInt!
  subaccount: Subaccount!
  timeOpened: BigInt!
  vQuoteWithoutFunding: BigInt!
  totalNetFunding: BigInt!
  closedBalances(skip: Int = 0, first: Int = 100, orderBy: ClosedPerpBalance_orderBy, orderDirection: OrderDirection, where: ClosedPerpBalance_filter): [ClosedPerpBalance!]!
}

input PerpBalanceSummary_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  productId: BigInt
  productId_not: BigInt
  productId_gt: BigInt
  productId_lt: BigInt
  productId_gte: BigInt
  productId_lte: BigInt
  productId_in: [BigInt!]
  productId_not_in: [BigInt!]
  subaccount: String
  subaccount_not: String
  subaccount_gt: String
  subaccount_lt: String
  subaccount_gte: String
  subaccount_lte: String
  subaccount_in: [String!]
  subaccount_not_in: [String!]
  subaccount_contains: String
  subaccount_contains_nocase: String
  subaccount_not_contains: String
  subaccount_not_contains_nocase: String
  subaccount_starts_with: String
  subaccount_starts_with_nocase: String
  subaccount_not_starts_with: String
  subaccount_not_starts_with_nocase: String
  subaccount_ends_with: String
  subaccount_ends_with_nocase: String
  subaccount_not_ends_with: String
  subaccount_not_ends_with_nocase: String
  subaccount_: Subaccount_filter
  timeOpened: BigInt
  timeOpened_not: BigInt
  timeOpened_gt: BigInt
  timeOpened_lt: BigInt
  timeOpened_gte: BigInt
  timeOpened_lte: BigInt
  timeOpened_in: [BigInt!]
  timeOpened_not_in: [BigInt!]
  vQuoteWithoutFunding: BigInt
  vQuoteWithoutFunding_not: BigInt
  vQuoteWithoutFunding_gt: BigInt
  vQuoteWithoutFunding_lt: BigInt
  vQuoteWithoutFunding_gte: BigInt
  vQuoteWithoutFunding_lte: BigInt
  vQuoteWithoutFunding_in: [BigInt!]
  vQuoteWithoutFunding_not_in: [BigInt!]
  totalNetFunding: BigInt
  totalNetFunding_not: BigInt
  totalNetFunding_gt: BigInt
  totalNetFunding_lt: BigInt
  totalNetFunding_gte: BigInt
  totalNetFunding_lte: BigInt
  totalNetFunding_in: [BigInt!]
  totalNetFunding_not_in: [BigInt!]
  closedBalances_: ClosedPerpBalance_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PerpBalanceSummary_filter]
  or: [PerpBalanceSummary_filter]
}

enum PerpBalanceSummary_orderBy {
  id
  productId
  subaccount
  subaccount__id
  subaccount__owner
  subaccount__name
  subaccount__createdAt
  subaccount__createdAtBlock
  timeOpened
  vQuoteWithoutFunding
  totalNetFunding
  closedBalances
}

type Query {
  clearinghouse(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Clearinghouse
  clearinghouses(
    skip: Int = 0
    first: Int = 100
    orderBy: Clearinghouse_orderBy
    orderDirection: OrderDirection
    where: Clearinghouse_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Clearinghouse!]! @merge(keyField: "id", keyArg: "where.id_in")
  order(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Order
  orders(
    skip: Int = 0
    first: Int = 100
    orderBy: Order_orderBy
    orderDirection: OrderDirection
    where: Order_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Order!]! @merge(keyField: "id", keyArg: "where.id_in")
  modifyCollateralEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ModifyCollateralEvent
  modifyCollateralEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: ModifyCollateralEvent_orderBy
    orderDirection: OrderDirection
    where: ModifyCollateralEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ModifyCollateralEvent!]! @merge(keyField: "id", keyArg: "where.id_in")
  mintLpEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MintLpEvent
  mintLpEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: MintLpEvent_orderBy
    orderDirection: OrderDirection
    where: MintLpEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MintLpEvent!]! @merge(keyField: "id", keyArg: "where.id_in")
  burnLpEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BurnLpEvent
  burnLpEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: BurnLpEvent_orderBy
    orderDirection: OrderDirection
    where: BurnLpEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BurnLpEvent!]! @merge(keyField: "id", keyArg: "where.id_in")
  settlePnlEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SettlePnlEvent
  settlePnlEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SettlePnlEvent_orderBy
    orderDirection: OrderDirection
    where: SettlePnlEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SettlePnlEvent!]! @merge(keyField: "id", keyArg: "where.id_in")
  liquidationEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidationEvent
  liquidationEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidationEvent_orderBy
    orderDirection: OrderDirection
    where: LiquidationEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidationEvent!]! @merge(keyField: "id", keyArg: "where.id_in")
  fillOrderEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FillOrderEvent
  fillOrderEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: FillOrderEvent_orderBy
    orderDirection: OrderDirection
    where: FillOrderEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FillOrderEvent!]! @merge(keyField: "id", keyArg: "where.id_in")
  subaccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Subaccount
  subaccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Subaccount_orderBy
    orderDirection: OrderDirection
    where: Subaccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Subaccount!]! @merge(keyField: "id", keyArg: "where.id_in")
  tradeSummary(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TradeSummary
  tradeSummaries(
    skip: Int = 0
    first: Int = 100
    orderBy: TradeSummary_orderBy
    orderDirection: OrderDirection
    where: TradeSummary_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TradeSummary!]! @merge(keyField: "id", keyArg: "where.id_in")
  spotBalanceSummary(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SpotBalanceSummary
  spotBalanceSummaries(
    skip: Int = 0
    first: Int = 100
    orderBy: SpotBalanceSummary_orderBy
    orderDirection: OrderDirection
    where: SpotBalanceSummary_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SpotBalanceSummary!]! @merge(keyField: "id", keyArg: "where.id_in")
  closedSpotBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClosedSpotBalance
  closedSpotBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: ClosedSpotBalance_orderBy
    orderDirection: OrderDirection
    where: ClosedSpotBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClosedSpotBalance!]! @merge(keyField: "id", keyArg: "where.id_in")
  perpBalanceSummary(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PerpBalanceSummary
  perpBalanceSummaries(
    skip: Int = 0
    first: Int = 100
    orderBy: PerpBalanceSummary_orderBy
    orderDirection: OrderDirection
    where: PerpBalanceSummary_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PerpBalanceSummary!]! @merge(keyField: "id", keyArg: "where.id_in")
  closedPerpBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClosedPerpBalance
  closedPerpBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: ClosedPerpBalance_orderBy
    orderDirection: OrderDirection
    where: ClosedPerpBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClosedPerpBalance!]! @merge(keyField: "id", keyArg: "where.id_in")
  submitTransactionsEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubmitTransactionsEvent
  submitTransactionsEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SubmitTransactionsEvent_orderBy
    orderDirection: OrderDirection
    where: SubmitTransactionsEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubmitTransactionsEvent!]! @merge(keyField: "id", keyArg: "where.id_in")
  submitSlowModeTransactionEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubmitSlowModeTransactionEvent
  submitSlowModeTransactionEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SubmitSlowModeTransactionEvent_orderBy
    orderDirection: OrderDirection
    where: SubmitSlowModeTransactionEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubmitSlowModeTransactionEvent!]! @merge(keyField: "id", keyArg: "where.id_in")
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type SettlePnlEvent {
  id: ID!
  block: BigInt!
  blockTime: BigInt!
  subaccount: Subaccount!
  productId: BigInt!
  amount: BigInt!
  positionAmount: BigInt!
  perpOraclePriceX18: BigInt!
}

input SettlePnlEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  blockTime: BigInt
  blockTime_not: BigInt
  blockTime_gt: BigInt
  blockTime_lt: BigInt
  blockTime_gte: BigInt
  blockTime_lte: BigInt
  blockTime_in: [BigInt!]
  blockTime_not_in: [BigInt!]
  subaccount: String
  subaccount_not: String
  subaccount_gt: String
  subaccount_lt: String
  subaccount_gte: String
  subaccount_lte: String
  subaccount_in: [String!]
  subaccount_not_in: [String!]
  subaccount_contains: String
  subaccount_contains_nocase: String
  subaccount_not_contains: String
  subaccount_not_contains_nocase: String
  subaccount_starts_with: String
  subaccount_starts_with_nocase: String
  subaccount_not_starts_with: String
  subaccount_not_starts_with_nocase: String
  subaccount_ends_with: String
  subaccount_ends_with_nocase: String
  subaccount_not_ends_with: String
  subaccount_not_ends_with_nocase: String
  subaccount_: Subaccount_filter
  productId: BigInt
  productId_not: BigInt
  productId_gt: BigInt
  productId_lt: BigInt
  productId_gte: BigInt
  productId_lte: BigInt
  productId_in: [BigInt!]
  productId_not_in: [BigInt!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  positionAmount: BigInt
  positionAmount_not: BigInt
  positionAmount_gt: BigInt
  positionAmount_lt: BigInt
  positionAmount_gte: BigInt
  positionAmount_lte: BigInt
  positionAmount_in: [BigInt!]
  positionAmount_not_in: [BigInt!]
  perpOraclePriceX18: BigInt
  perpOraclePriceX18_not: BigInt
  perpOraclePriceX18_gt: BigInt
  perpOraclePriceX18_lt: BigInt
  perpOraclePriceX18_gte: BigInt
  perpOraclePriceX18_lte: BigInt
  perpOraclePriceX18_in: [BigInt!]
  perpOraclePriceX18_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SettlePnlEvent_filter]
  or: [SettlePnlEvent_filter]
}

enum SettlePnlEvent_orderBy {
  id
  block
  blockTime
  subaccount
  subaccount__id
  subaccount__owner
  subaccount__name
  subaccount__createdAt
  subaccount__createdAtBlock
  productId
  amount
  positionAmount
  perpOraclePriceX18
}

type SpotBalanceSummary {
  id: ID!
  productId: BigInt!
  subaccount: Subaccount!
  timeOpened: BigInt!
  netRealAmount: BigInt!
  totalNetInterest: BigInt!
  closedBalances(skip: Int = 0, first: Int = 100, orderBy: ClosedSpotBalance_orderBy, orderDirection: OrderDirection, where: ClosedSpotBalance_filter): [ClosedSpotBalance!]!
}

input SpotBalanceSummary_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  productId: BigInt
  productId_not: BigInt
  productId_gt: BigInt
  productId_lt: BigInt
  productId_gte: BigInt
  productId_lte: BigInt
  productId_in: [BigInt!]
  productId_not_in: [BigInt!]
  subaccount: String
  subaccount_not: String
  subaccount_gt: String
  subaccount_lt: String
  subaccount_gte: String
  subaccount_lte: String
  subaccount_in: [String!]
  subaccount_not_in: [String!]
  subaccount_contains: String
  subaccount_contains_nocase: String
  subaccount_not_contains: String
  subaccount_not_contains_nocase: String
  subaccount_starts_with: String
  subaccount_starts_with_nocase: String
  subaccount_not_starts_with: String
  subaccount_not_starts_with_nocase: String
  subaccount_ends_with: String
  subaccount_ends_with_nocase: String
  subaccount_not_ends_with: String
  subaccount_not_ends_with_nocase: String
  subaccount_: Subaccount_filter
  timeOpened: BigInt
  timeOpened_not: BigInt
  timeOpened_gt: BigInt
  timeOpened_lt: BigInt
  timeOpened_gte: BigInt
  timeOpened_lte: BigInt
  timeOpened_in: [BigInt!]
  timeOpened_not_in: [BigInt!]
  netRealAmount: BigInt
  netRealAmount_not: BigInt
  netRealAmount_gt: BigInt
  netRealAmount_lt: BigInt
  netRealAmount_gte: BigInt
  netRealAmount_lte: BigInt
  netRealAmount_in: [BigInt!]
  netRealAmount_not_in: [BigInt!]
  totalNetInterest: BigInt
  totalNetInterest_not: BigInt
  totalNetInterest_gt: BigInt
  totalNetInterest_lt: BigInt
  totalNetInterest_gte: BigInt
  totalNetInterest_lte: BigInt
  totalNetInterest_in: [BigInt!]
  totalNetInterest_not_in: [BigInt!]
  closedBalances_: ClosedSpotBalance_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SpotBalanceSummary_filter]
  or: [SpotBalanceSummary_filter]
}

enum SpotBalanceSummary_orderBy {
  id
  productId
  subaccount
  subaccount__id
  subaccount__owner
  subaccount__name
  subaccount__createdAt
  subaccount__createdAtBlock
  timeOpened
  netRealAmount
  totalNetInterest
  closedBalances
}

type Subaccount {
  id: ID!
  clearinghouse: Clearinghouse!
  owner: Bytes!
  name: String!
  createdAt: BigInt!
  createdAtBlock: BigInt!
  orders(skip: Int = 0, first: Int = 100, orderBy: Order_orderBy, orderDirection: OrderDirection, where: Order_filter): [Order!]!
  tradeSummaries(skip: Int = 0, first: Int = 100, orderBy: TradeSummary_orderBy, orderDirection: OrderDirection, where: TradeSummary_filter): [TradeSummary!]!
  spotBalanceSummaries(skip: Int = 0, first: Int = 100, orderBy: SpotBalanceSummary_orderBy, orderDirection: OrderDirection, where: SpotBalanceSummary_filter): [SpotBalanceSummary!]!
  perpBalanceSummaries(skip: Int = 0, first: Int = 100, orderBy: PerpBalanceSummary_orderBy, orderDirection: OrderDirection, where: PerpBalanceSummary_filter): [PerpBalanceSummary!]!
  modifyCollateralEvents(skip: Int = 0, first: Int = 100, orderBy: ModifyCollateralEvent_orderBy, orderDirection: OrderDirection, where: ModifyCollateralEvent_filter): [ModifyCollateralEvent!]!
  settlePnlEvents(skip: Int = 0, first: Int = 100, orderBy: SettlePnlEvent_orderBy, orderDirection: OrderDirection, where: SettlePnlEvent_filter): [SettlePnlEvent!]!
  liquidateeEvents(skip: Int = 0, first: Int = 100, orderBy: LiquidationEvent_orderBy, orderDirection: OrderDirection, where: LiquidationEvent_filter): [LiquidationEvent!]!
  liquidatorEvents(skip: Int = 0, first: Int = 100, orderBy: LiquidationEvent_orderBy, orderDirection: OrderDirection, where: LiquidationEvent_filter): [LiquidationEvent!]!
  fillOrderEvents(skip: Int = 0, first: Int = 100, orderBy: FillOrderEvent_orderBy, orderDirection: OrderDirection, where: FillOrderEvent_filter): [FillOrderEvent!]!
}

input Subaccount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  clearinghouse: String
  clearinghouse_not: String
  clearinghouse_gt: String
  clearinghouse_lt: String
  clearinghouse_gte: String
  clearinghouse_lte: String
  clearinghouse_in: [String!]
  clearinghouse_not_in: [String!]
  clearinghouse_contains: String
  clearinghouse_contains_nocase: String
  clearinghouse_not_contains: String
  clearinghouse_not_contains_nocase: String
  clearinghouse_starts_with: String
  clearinghouse_starts_with_nocase: String
  clearinghouse_not_starts_with: String
  clearinghouse_not_starts_with_nocase: String
  clearinghouse_ends_with: String
  clearinghouse_ends_with_nocase: String
  clearinghouse_not_ends_with: String
  clearinghouse_not_ends_with_nocase: String
  clearinghouse_: Clearinghouse_filter
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  orders_: Order_filter
  tradeSummaries_: TradeSummary_filter
  spotBalanceSummaries_: SpotBalanceSummary_filter
  perpBalanceSummaries_: PerpBalanceSummary_filter
  modifyCollateralEvents_: ModifyCollateralEvent_filter
  settlePnlEvents_: SettlePnlEvent_filter
  liquidateeEvents_: LiquidationEvent_filter
  liquidatorEvents_: LiquidationEvent_filter
  fillOrderEvents_: FillOrderEvent_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Subaccount_filter]
  or: [Subaccount_filter]
}

enum Subaccount_orderBy {
  id
  clearinghouse
  clearinghouse__id
  clearinghouse__endpoint
  clearinghouse__quoteProduct
  clearinghouse__numSubaccounts
  clearinghouse__numProducts
  owner
  name
  createdAt
  createdAtBlock
  orders
  tradeSummaries
  spotBalanceSummaries
  perpBalanceSummaries
  modifyCollateralEvents
  settlePnlEvents
  liquidateeEvents
  liquidatorEvents
  fillOrderEvents
}

type SubmitSlowModeTransactionEvent {
  id: ID!
  sender: Bytes!
  tx: Bytes!
  executableAt: BigInt!
  createdAt: BigInt!
}

input SubmitSlowModeTransactionEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sender: Bytes
  sender_not: Bytes
  sender_gt: Bytes
  sender_lt: Bytes
  sender_gte: Bytes
  sender_lte: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  tx: Bytes
  tx_not: Bytes
  tx_gt: Bytes
  tx_lt: Bytes
  tx_gte: Bytes
  tx_lte: Bytes
  tx_in: [Bytes!]
  tx_not_in: [Bytes!]
  tx_contains: Bytes
  tx_not_contains: Bytes
  executableAt: BigInt
  executableAt_not: BigInt
  executableAt_gt: BigInt
  executableAt_lt: BigInt
  executableAt_gte: BigInt
  executableAt_lte: BigInt
  executableAt_in: [BigInt!]
  executableAt_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SubmitSlowModeTransactionEvent_filter]
  or: [SubmitSlowModeTransactionEvent_filter]
}

enum SubmitSlowModeTransactionEvent_orderBy {
  id
  sender
  tx
  executableAt
  createdAt
}

type SubmitTransactionsEvent {
  id: ID!
  transactions: [Bytes!]!
  createdAt: BigInt!
}

input SubmitTransactionsEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transactions: [Bytes!]
  transactions_not: [Bytes!]
  transactions_contains: [Bytes!]
  transactions_contains_nocase: [Bytes!]
  transactions_not_contains: [Bytes!]
  transactions_not_contains_nocase: [Bytes!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SubmitTransactionsEvent_filter]
  or: [SubmitTransactionsEvent_filter]
}

enum SubmitTransactionsEvent_orderBy {
  id
  transactions
  createdAt
}

type Subscription {
  clearinghouse(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Clearinghouse
  clearinghouses(
    skip: Int = 0
    first: Int = 100
    orderBy: Clearinghouse_orderBy
    orderDirection: OrderDirection
    where: Clearinghouse_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Clearinghouse!]!
  order(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Order
  orders(
    skip: Int = 0
    first: Int = 100
    orderBy: Order_orderBy
    orderDirection: OrderDirection
    where: Order_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Order!]!
  modifyCollateralEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ModifyCollateralEvent
  modifyCollateralEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: ModifyCollateralEvent_orderBy
    orderDirection: OrderDirection
    where: ModifyCollateralEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ModifyCollateralEvent!]!
  mintLpEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MintLpEvent
  mintLpEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: MintLpEvent_orderBy
    orderDirection: OrderDirection
    where: MintLpEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MintLpEvent!]!
  burnLpEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BurnLpEvent
  burnLpEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: BurnLpEvent_orderBy
    orderDirection: OrderDirection
    where: BurnLpEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BurnLpEvent!]!
  settlePnlEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SettlePnlEvent
  settlePnlEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SettlePnlEvent_orderBy
    orderDirection: OrderDirection
    where: SettlePnlEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SettlePnlEvent!]!
  liquidationEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidationEvent
  liquidationEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidationEvent_orderBy
    orderDirection: OrderDirection
    where: LiquidationEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidationEvent!]!
  fillOrderEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FillOrderEvent
  fillOrderEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: FillOrderEvent_orderBy
    orderDirection: OrderDirection
    where: FillOrderEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FillOrderEvent!]!
  subaccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Subaccount
  subaccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Subaccount_orderBy
    orderDirection: OrderDirection
    where: Subaccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Subaccount!]!
  tradeSummary(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TradeSummary
  tradeSummaries(
    skip: Int = 0
    first: Int = 100
    orderBy: TradeSummary_orderBy
    orderDirection: OrderDirection
    where: TradeSummary_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TradeSummary!]!
  spotBalanceSummary(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SpotBalanceSummary
  spotBalanceSummaries(
    skip: Int = 0
    first: Int = 100
    orderBy: SpotBalanceSummary_orderBy
    orderDirection: OrderDirection
    where: SpotBalanceSummary_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SpotBalanceSummary!]!
  closedSpotBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClosedSpotBalance
  closedSpotBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: ClosedSpotBalance_orderBy
    orderDirection: OrderDirection
    where: ClosedSpotBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClosedSpotBalance!]!
  perpBalanceSummary(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PerpBalanceSummary
  perpBalanceSummaries(
    skip: Int = 0
    first: Int = 100
    orderBy: PerpBalanceSummary_orderBy
    orderDirection: OrderDirection
    where: PerpBalanceSummary_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PerpBalanceSummary!]!
  closedPerpBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClosedPerpBalance
  closedPerpBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: ClosedPerpBalance_orderBy
    orderDirection: OrderDirection
    where: ClosedPerpBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClosedPerpBalance!]!
  submitTransactionsEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubmitTransactionsEvent
  submitTransactionsEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SubmitTransactionsEvent_orderBy
    orderDirection: OrderDirection
    where: SubmitTransactionsEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubmitTransactionsEvent!]!
  submitSlowModeTransactionEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubmitSlowModeTransactionEvent
  submitSlowModeTransactionEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SubmitSlowModeTransactionEvent_orderBy
    orderDirection: OrderDirection
    where: SubmitSlowModeTransactionEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubmitSlowModeTransactionEvent!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type TradeSummary {
  id: ID!
  productId: BigInt!
  subaccount: Subaccount!
  totalEntryQuoteAmountAbs: BigInt!
  totalEntryAmountAbs: BigInt!
  totalCloseQuoteAmountAbs: BigInt!
  totalCloseAmountAbs: BigInt!
}

input TradeSummary_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  productId: BigInt
  productId_not: BigInt
  productId_gt: BigInt
  productId_lt: BigInt
  productId_gte: BigInt
  productId_lte: BigInt
  productId_in: [BigInt!]
  productId_not_in: [BigInt!]
  subaccount: String
  subaccount_not: String
  subaccount_gt: String
  subaccount_lt: String
  subaccount_gte: String
  subaccount_lte: String
  subaccount_in: [String!]
  subaccount_not_in: [String!]
  subaccount_contains: String
  subaccount_contains_nocase: String
  subaccount_not_contains: String
  subaccount_not_contains_nocase: String
  subaccount_starts_with: String
  subaccount_starts_with_nocase: String
  subaccount_not_starts_with: String
  subaccount_not_starts_with_nocase: String
  subaccount_ends_with: String
  subaccount_ends_with_nocase: String
  subaccount_not_ends_with: String
  subaccount_not_ends_with_nocase: String
  subaccount_: Subaccount_filter
  totalEntryQuoteAmountAbs: BigInt
  totalEntryQuoteAmountAbs_not: BigInt
  totalEntryQuoteAmountAbs_gt: BigInt
  totalEntryQuoteAmountAbs_lt: BigInt
  totalEntryQuoteAmountAbs_gte: BigInt
  totalEntryQuoteAmountAbs_lte: BigInt
  totalEntryQuoteAmountAbs_in: [BigInt!]
  totalEntryQuoteAmountAbs_not_in: [BigInt!]
  totalEntryAmountAbs: BigInt
  totalEntryAmountAbs_not: BigInt
  totalEntryAmountAbs_gt: BigInt
  totalEntryAmountAbs_lt: BigInt
  totalEntryAmountAbs_gte: BigInt
  totalEntryAmountAbs_lte: BigInt
  totalEntryAmountAbs_in: [BigInt!]
  totalEntryAmountAbs_not_in: [BigInt!]
  totalCloseQuoteAmountAbs: BigInt
  totalCloseQuoteAmountAbs_not: BigInt
  totalCloseQuoteAmountAbs_gt: BigInt
  totalCloseQuoteAmountAbs_lt: BigInt
  totalCloseQuoteAmountAbs_gte: BigInt
  totalCloseQuoteAmountAbs_lte: BigInt
  totalCloseQuoteAmountAbs_in: [BigInt!]
  totalCloseQuoteAmountAbs_not_in: [BigInt!]
  totalCloseAmountAbs: BigInt
  totalCloseAmountAbs_not: BigInt
  totalCloseAmountAbs_gt: BigInt
  totalCloseAmountAbs_lt: BigInt
  totalCloseAmountAbs_gte: BigInt
  totalCloseAmountAbs_lte: BigInt
  totalCloseAmountAbs_in: [BigInt!]
  totalCloseAmountAbs_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TradeSummary_filter]
  or: [TradeSummary_filter]
}

enum TradeSummary_orderBy {
  id
  productId
  subaccount
  subaccount__id
  subaccount__owner
  subaccount__name
  subaccount__createdAt
  subaccount__createdAtBlock
  totalEntryQuoteAmountAbs
  totalEntryAmountAbs
  totalCloseQuoteAmountAbs
  totalCloseAmountAbs
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}