schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type MarketCandlestick {
  id: ID!
  productId: BigInt!
  time: BigInt!
  period: Int!
  openX18: BigInt!
  closeX18: BigInt!
  lowX18: BigInt!
  highX18: BigInt!
  volumeBaseX18: BigInt!
  volumeQuoteX18: BigInt!
}

input MarketCandlestick_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  productId: BigInt
  productId_not: BigInt
  productId_gt: BigInt
  productId_lt: BigInt
  productId_gte: BigInt
  productId_lte: BigInt
  productId_in: [BigInt!]
  productId_not_in: [BigInt!]
  time: BigInt
  time_not: BigInt
  time_gt: BigInt
  time_lt: BigInt
  time_gte: BigInt
  time_lte: BigInt
  time_in: [BigInt!]
  time_not_in: [BigInt!]
  period: Int
  period_not: Int
  period_gt: Int
  period_lt: Int
  period_gte: Int
  period_lte: Int
  period_in: [Int!]
  period_not_in: [Int!]
  openX18: BigInt
  openX18_not: BigInt
  openX18_gt: BigInt
  openX18_lt: BigInt
  openX18_gte: BigInt
  openX18_lte: BigInt
  openX18_in: [BigInt!]
  openX18_not_in: [BigInt!]
  closeX18: BigInt
  closeX18_not: BigInt
  closeX18_gt: BigInt
  closeX18_lt: BigInt
  closeX18_gte: BigInt
  closeX18_lte: BigInt
  closeX18_in: [BigInt!]
  closeX18_not_in: [BigInt!]
  lowX18: BigInt
  lowX18_not: BigInt
  lowX18_gt: BigInt
  lowX18_lt: BigInt
  lowX18_gte: BigInt
  lowX18_lte: BigInt
  lowX18_in: [BigInt!]
  lowX18_not_in: [BigInt!]
  highX18: BigInt
  highX18_not: BigInt
  highX18_gt: BigInt
  highX18_lt: BigInt
  highX18_gte: BigInt
  highX18_lte: BigInt
  highX18_in: [BigInt!]
  highX18_not_in: [BigInt!]
  volumeBaseX18: BigInt
  volumeBaseX18_not: BigInt
  volumeBaseX18_gt: BigInt
  volumeBaseX18_lt: BigInt
  volumeBaseX18_gte: BigInt
  volumeBaseX18_lte: BigInt
  volumeBaseX18_in: [BigInt!]
  volumeBaseX18_not_in: [BigInt!]
  volumeQuoteX18: BigInt
  volumeQuoteX18_not: BigInt
  volumeQuoteX18_gt: BigInt
  volumeQuoteX18_lt: BigInt
  volumeQuoteX18_gte: BigInt
  volumeQuoteX18_lte: BigInt
  volumeQuoteX18_in: [BigInt!]
  volumeQuoteX18_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum MarketCandlestick_orderBy {
  id
  productId
  time
  period
  openX18
  closeX18
  lowX18
  highX18
  volumeBaseX18
  volumeQuoteX18
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  marketCandlestick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketCandlestick
  marketCandlesticks(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketCandlestick_orderBy
    orderDirection: OrderDirection
    where: MarketCandlestick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketCandlestick!]! @merge(keyField: "id", keyArg: "where.id_in")
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  marketCandlestick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketCandlestick
  marketCandlesticks(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketCandlestick_orderBy
    orderDirection: OrderDirection
    where: MarketCandlestick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketCandlestick!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}